Index: Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># ----------------------------------------------------------------------------------------------------------------------\n# Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n# Licensed under the Universal Permissive License v 1.0 as shown at\n# https://oss.oracle.com/licenses/upl.\n#\n# ----------------------------------------------------------------------------------------------------------------------\n# This is the Makefile to build the Coherence Python Client\n# ----------------------------------------------------------------------------------------------------------------------\n\nVERSION ?=0.9.0\nCURRDIR := $(shell pwd)\nUSER_ID := $(shell echo \"`id -u`:`id -g`\")\n\noverride BUILD_BIN           := $(CURRDIR)/bin\noverride PROTO_DIR\t\t\t := $(CURRDIR)/etc/proto\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Set the location of various build tools\n# ----------------------------------------------------------------------------------------------------------------------\noverride BUILD_OUTPUT        := $(CURRDIR)/build/_output\noverride BUILD_BIN           := $(CURRDIR)/bin\noverride PROTO_OUT           := $(CURRDIR)/proto\noverride BUILD_TARGETS       := $(BUILD_OUTPUT)/targets\noverride TEST_LOGS_DIR       := $(BUILD_OUTPUT)/test-logs\noverride COVERAGE_DIR        := $(BUILD_OUTPUT)/coverage\noverride COPYRIGHT_JAR       := glassfish-copyright-maven-plugin-2.4.jar\noverride BUILD_CERTS         := $(CURRDIR)/tests/utils/certs\noverride ENV_FILE            := tests/utils/.env\n\n# Maven version is always 1.0.0 as it is only for testing\nMVN_VERSION ?= 1.0.0\n\n# Coherence CE version to run base tests against\nCOHERENCE_VERSION ?= 22.06.4\nCOHERENCE_GROUP_ID ?= com.oracle.coherence.ce\nCOHERENCE_WKA1 ?= server1\nCOHERENCE_WKA2 ?= server1\nCLUSTER_PORT ?= 7574\n# Profiles to include for building\nPROFILES ?=\nCOHERENCE_BASE_IMAGE ?= gcr.io/distroless/java:11\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Set the location of various build tools\n# ----------------------------------------------------------------------------------------------------------------------\nTOOLS_DIRECTORY   = $(CURRDIR)/build/tools\nTOOLS_BIN         = $(TOOLS_DIRECTORY)/bin\n\n# ----------------------------------------------------------------------------------------------------------------------\n# The test application images used in integration tests\n# ----------------------------------------------------------------------------------------------------------------------\nRELEASE_IMAGE_PREFIX     ?= ghcr.io/oracle/\nTEST_APPLICATION_IMAGE_1 := $(RELEASE_IMAGE_PREFIX)coherence-python-test-1:1.0.0\nTEST_APPLICATION_IMAGE_2 := $(RELEASE_IMAGE_PREFIX)coherence-python-test-2:1.0.0\nGO_TEST_FLAGS ?= -timeout 20m\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Options to append to the Maven command\n# ----------------------------------------------------------------------------------------------------------------------\nMAVEN_OPTIONS ?= -Dmaven.wagon.httpconnectionManager.ttlSeconds=25 -Dmaven.wagon.http.retryHandler.count=3\nMAVEN_BUILD_OPTS :=$(USE_MAVEN_SETTINGS) -Drevision=$(MVN_VERSION) -Dcoherence.version=$(COHERENCE_VERSION) -Dcoherence.group.id=$(COHERENCE_GROUP_ID) $(MAVEN_OPTIONS)\n\nCURRDIR := $(shell pwd)\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Clean-up all of the build artifacts\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: clean\nclean: ## Cleans the build\n\t@echo \"Cleaning Project\"\n\t-rm -rf $(CURRDIR)/build\n#\t-rm -rf $(PROTO_DIR)\n\t-rm -rf $(CURRDIR)/htmlcov\n\t-rm -rf $(CURRDIR)/.pytest_cache\n\t-rm -rf $(BUILD_CERTS)\n\t@mkdir -p $(BUILD_CERTS)\n\tmvn -B -f tests/java/coherence-python-test $(MAVEN_BUILD_OPTS) clean\n\n.PHONY: certs\ncerts: ## Generates certificates for TLS tests\n\t@echo \"Generating certs\"\n\t./tests/scripts/keys.sh $(BUILD_CERTS)\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Configure the build properties\n# ----------------------------------------------------------------------------------------------------------------------\n$(BUILD_PROPS):\n\t@echo \"Creating build directories\"\n\t@mkdir -p $(BUILD_OUTPUT)\n\t@mkdir -p $(BUILD_BIN)\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Build the Coherence Go Client Test Image\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: build-test-images\nbuild-test-images: ## Build the Test images\n\t@echo \"${MAVEN_BUILD_OPTS}\"\n\tmvn -B -f tests/java/coherence-python-test clean package jib:dockerBuild -DskipTests -P member1$(PROFILES) -Djib.to.image=$(TEST_APPLICATION_IMAGE_1) -Dcoherence.test.base.image=$(COHERENCE_BASE_IMAGE) $(MAVEN_BUILD_OPTS)\n\tmvn -B -f tests/java/coherence-python-test clean package jib:dockerBuild -DskipTests -P member2$(PROFILES) -Djib.to.image=$(TEST_APPLICATION_IMAGE_2) -Dcoherence.test.base.image=$(COHERENCE_BASE_IMAGE) $(MAVEN_BUILD_OPTS)\n\techo \"CURRENT_UID=$(USER_ID)\" >> $(ENV_FILE)\n\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Download and build proto files\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: generate-proto\ngenerate-proto:  ## Generate Proto Files\n\tmkdir -p $(PROTO_DIR) || true\n\tcurl -o $(PROTO_DIR)/services.proto https://raw.githubusercontent.com/oracle/coherence/$(COHERENCE_VERSION)/prj/coherence-grpc/src/main/proto/services.proto\n\tcurl -o $(PROTO_DIR)/messages.proto https://raw.githubusercontent.com/oracle/coherence/$(COHERENCE_VERSION)/prj/coherence-grpc/src/main/proto/messages.proto\n\tpython -m grpc_tools.protoc --proto_path=$(CURRDIR)/etc/proto --python_out=$(CURRDIR)/src/coherence --grpc_python_out=$(CURRDIR)/src/coherence $(CURRDIR)/etc/proto/messages.proto $(CURRDIR)/etc/proto/services.proto\n\tsed -e 's/import messages_pb2 as messages__pb2/import coherence.messages_pb2 as messages__pb2/' \\\n\t\t< $(CURRDIR)/src/coherence/services_pb2_grpc.py > $(CURRDIR)/src/coherence/services_pb2_grpc.py.out\n\tmv $(CURRDIR)/src/coherence/services_pb2_grpc.py.out $(CURRDIR)/src/coherence/services_pb2_grpc.py\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Run tests with code coverage\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: test\ntest:  ##\n\tpytest -W error --cov src/coherence --cov-report=term --cov-report=html\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Run standards validation across project\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: validate-setup\nvalidate-setup:  ##\n\tpoetry update\n\tpre-commit autoupdate\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Run standards validation across project\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: validate\nvalidate:  ##\n\tpre-commit run --all-files\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Obtain the protoc binary\n# ----------------------------------------------------------------------------------------------------------------------\n$(TOOLS_BIN)/protoc:\n\t@mkdir -p $(TOOLS_BIN)\n\tcurl -Lo $(TOOLS_DIRECTORY)/protoc-3.19.4-osx-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-osx-x86_64.zip\n\tcd $(TOOLS_DIRECTORY)\n\tunzip -d $(TOOLS_DIRECTORY) $(TOOLS_DIRECTORY)/protoc-3.19.4-osx-x86_64.zip\n\n#-----------------------------------------------------------------------------------------------------------------------\n# Generate HTML documentation\n# Run this target only in poetry shell\n# The generated html pages are in $(CURRDIR)/docs/_build\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: docs\ndocs:  ## Generate doc\n\tcd $(CURRDIR)/docs;\t\\\n\tpoetry run sphinx-build -b html . _build\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Startup cluster members via docker compose\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: test-cluster-startup\ntest-cluster-startup: $(BUILD_PROPS) ## Startup any test cluster members using docker-compose\n\tcd tests/utils && docker-compose -f docker-compose-2-members.yaml up -d\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Shutdown any cluster members via docker compose\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: test-cluster-shutdown\ntest-cluster-shutdown: ## Shutdown any test cluster members using docker-compose\n\tcd tests/utils && docker-compose -f docker-compose-2-members.yaml down || true\n\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Startup standalone coherence via java -jar\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: test-coherence-startup\ntest-coherence-startup: ## Startup standalone cluster\n\tscripts/startup-clusters.sh $(TEST_LOGS_DIR) $(CLUSTER_PORT) $(COHERENCE_GROUP_ID) ${COHERENCE_VERSION}\n\t@echo \"Clusters started up\"\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Shutdown coherence via java -jar\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: test-coherence-shutdown\ntest-coherence-shutdown: ## shutdown standalone cluster\n\t@ps -ef | grep shutMeDownPlease | grep -v grep | awk '{print $$2}' | xargs kill -9 || true\n\t@echo \"Clusters shutdown\"\n\n# ----------------------------------------------------------------------------------------------------------------------\n# wait for 30 seconds\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: just-wait\njust-wait: ## sleep for 30 seconds\n\t@echo \"Sleep for 30 seconds\"\n\tsleep 30\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Remove docker images\n# ----------------------------------------------------------------------------------------------------------------------\n.PHONY: remove-app-images\nremove-app-images: ## Remove docker images\n\t@echo \"Remove docker images\"\n\tdocker image rmi $(TEST_APPLICATION_IMAGE_1) $(TEST_APPLICATION_IMAGE_2) || true\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Makefile b/Makefile
--- a/Makefile	(revision f76d8f67a09b62e50b30c29a112f42ee9e5ac58d)
+++ b/Makefile	(date 1686086326452)
@@ -38,7 +38,7 @@
 CLUSTER_PORT ?= 7574
 # Profiles to include for building
 PROFILES ?=
-COHERENCE_BASE_IMAGE ?= gcr.io/distroless/java:11
+COHERENCE_BASE_IMAGE ?= gcr.io/distroless/java17-debian11:latest-arm64
 
 # ----------------------------------------------------------------------------------------------------------------------
 # Set the location of various build tools
@@ -118,7 +118,7 @@
 # ----------------------------------------------------------------------------------------------------------------------
 .PHONY: test
 test:  ##
-	pytest -W error --cov src/coherence --cov-report=term --cov-report=html
+	pytest --timeout=200 -W error --cov src/coherence --cov-report=term --cov-report=html
 
 # ----------------------------------------------------------------------------------------------------------------------
 # Run standards validation across project
Index: tests/java/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n\n    Copyright (c) 2022 Oracle and/or its affiliates.\n    Licensed under the Universal Permissive License v 1.0 as shown at\n    https://oss.oracle.com/licenses/upl.\n\n-->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.oracle.coherence.python</groupId>\n  <artifactId>coherence-python-parent</artifactId>\n  <packaging>pom</packaging>\n  <version>1.0.0</version>\n\n  <description>Oracle Coherence Go Client Test</description>\n  <name>coherence-python-parent</name>\n\n  <modules>\n    <module>coherence-python-test</module>\n  </modules>\n\n  <properties>\n    <revision>1.0.0</revision>\n    <operator.version>${project.version}</operator.version>\n\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <maven.compiler.source>8</maven.compiler.source>\n    <maven.compiler.target>8</maven.compiler.target>\n\n    <coherence.group.id>com.oracle.coherence.ce</coherence.group.id>\n    <coherence.version>22.06.4</coherence.version>\n\n    <!-- The version of Coherence to use in the test images -->\n    <coherence.test.groupId>com.oracle.coherence.ce</coherence.test.groupId>\n    <coherence.test.version>${coherence.version}</coherence.test.version>\n\n    <coherence.test.base.image>gcr.io/distroless/java:11</coherence.test.base.image>\n\n    <!-- library dependency versions -->\n    <version.lib.asciidoctor.diagram>2.2.1</version.lib.asciidoctor.diagram>\n    <version.lib.commonjava.directory>1.0</version.lib.commonjava.directory>\n    <version.plugin.helidon-build-tools>2.0.0-M3</version.plugin.helidon-build-tools>\n    <version.plugin.jib>3.3.0</version.plugin.jib>\n    <version.plugin.maven.assembly>3.3.0</version.plugin.maven.assembly>\n    <version.plugin.maven.compiler>3.7.0</version.plugin.maven.compiler>\n    <version.plugin.maven.dependency>3.2.0</version.plugin.maven.dependency>\n    <version.plugin.maven.jar>3.2.0</version.plugin.maven.jar>\n    <version.plugin.maven.shade>3.2.4</version.plugin.maven.shade>\n    <version.plugin.maven.resource>3.1.0</version.plugin.maven.resource>\n\n    <!-- coherence cache config to build with -->\n    <coherence.cache.config>test-cache-config.xml</coherence.cache.config>\n    <coherence.cluster1>cluster1</coherence.cluster1>\n    <coherence.cluster2>cluster1</coherence.cluster2>\n    <coherence.wka1>server1</coherence.wka1>\n    <coherence.wka2>server1</coherence.wka2>\n\n    <com.sun.xml.bind.version>2.3.0</com.sun.xml.bind.version>\n    <javax.activation.version>1.1.1</javax.activation.version>\n\n    <!-- grpc security settings -->\n    <coherence.grpc.server.socketprovider></coherence.grpc.server.socketprovider>\n    <coherence.security.key></coherence.security.key>\n    <coherence.security.cert></coherence.security.cert>\n    <coherence.security.ca.cert></coherence.security.ca.cert>\n  </properties>\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>${coherence.group.id}</groupId>\n        <artifactId>coherence</artifactId>\n        <version>${coherence.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.oracle.coherence.ce</groupId>\n        <artifactId>coherence-json</artifactId>\n        <version>${coherence.version}</version>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>${version.plugin.maven.compiler}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-assembly-plugin</artifactId>\n          <version>${version.plugin.maven.assembly}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>${version.plugin.maven.jar}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-dependency-plugin</artifactId>\n          <version>${version.plugin.maven.dependency}</version>\n        </plugin>\n\n        <plugin>\n          <groupId>org.commonjava.maven.plugins</groupId>\n          <artifactId>directory-maven-plugin</artifactId>\n          <version>${version.lib.commonjava.directory}</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n\n    <plugins>\n      <plugin>\n        <groupId>org.commonjava.maven.plugins</groupId>\n        <artifactId>directory-maven-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>generate-top-parent-basedir</id>\n            <goals>\n              <goal>highest-basedir</goal>\n            </goals>\n            <phase>validate</phase>\n            <configuration>\n              <property>top.parent.basedir</property>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n\n  <profiles>\n    <!-- secure grpc with tls -->\n    <profile>\n      <id>secure</id>\n      <properties>\n        <coherence.grpc.server.socketprovider>tls-files</coherence.grpc.server.socketprovider>\n        <coherence.security.key>/certs/star-lord.pem</coherence.security.key>\n        <coherence.security.cert>/certs/star-lord.crt</coherence.security.cert>\n        <coherence.security.ca.cert>/certs/guardians-ca.crt</coherence.security.ca.cert>\n      </properties>\n    </profile>\n\n    <!-- member1 image -->\n    <profile>\n      <id>member1</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>com.google.cloud.tools</groupId>\n            <artifactId>jib-maven-plugin</artifactId>\n            <version>${version.plugin.jib}</version>\n            <configuration>\n              <from>\n                <image>docker://${coherence.test.base.image}</image>\n              </from>\n              <container>\n                <jvmFlags>\n                  <jvmFlag>-Dcoherence.wka=server1</jvmFlag>\n                  <jvmFlag>-Dcoherence.cluster=cluster1</jvmFlag>\n                  <jvmFlag>-Dcoherence.member=member1</jvmFlag>\n                  <jvmFlag>-Dcoherence.machine=server1</jvmFlag>\n                  <jvmFlag>-Dcoherence.site=Site1</jvmFlag>\n                  <jvmFlag>-Dcoherence.management=all</jvmFlag>\n                  <jvmFlag>-Dcoherence.management.http=all</jvmFlag>\n                  <jvmFlag>-Dcoherence.management.http.port=30000</jvmFlag>\n                  <jvmFlag>-Dcoherence.metrics.http.enabled=true</jvmFlag>\n                  <jvmFlag>-Dcoherence.metrics.http.port=9612</jvmFlag>\n                  <jvmFlag>-Dcoherence.grpc.server.port=1408</jvmFlag>\n                  <jvmFlag>-Dcoherence.grpc.server.socketprovider=${coherence.grpc.server.socketprovider}</jvmFlag>\n                  <jvmFlag>-Dcoherence.security.key=${coherence.security.key}</jvmFlag>\n                  <jvmFlag>-Dcoherence.security.cert=${coherence.security.cert}</jvmFlag>\n                  <jvmFlag>-Dcoherence.security.ca.cert=${coherence.security.ca.cert}</jvmFlag>\n                  <jvmFlag>-Dcoherence.io.json.debug=true</jvmFlag>\n                  <jvmFlag>-Dcoherence.log.level=9</jvmFlag>\n                  <jvmFlag>-Dcoherence.distributed.localstorage=true</jvmFlag>\n                  <jvmFlag>-Dcoherence.management.refresh.expiry=1s</jvmFlag>\n                  <jvmFlag>-Dcoherence.cacheconfig=${coherence.cache.config}</jvmFlag>\n                  <jvmFlag>-Dcoherence.distributed.partitioncount=13</jvmFlag>\n                </jvmFlags>\n                <mainClass>com.oracle.coherence.python.testing.RestServer</mainClass>\n                <format>OCI</format>\n              </container>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <!-- member2 image -->\n    <profile>\n      <id>member2</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>com.google.cloud.tools</groupId>\n            <artifactId>jib-maven-plugin</artifactId>\n            <version>${version.plugin.jib}</version>\n            <configuration>\n              <from>\n                <image>docker://${coherence.test.base.image}</image>\n              </from>\n              <container>\n                <jvmFlags>\n                  <jvmFlag>-Dcoherence.wka=server1</jvmFlag>\n                  <jvmFlag>-Dcoherence.cluster=cluster1</jvmFlag>\n                  <jvmFlag>-Dcoherence.member=member2</jvmFlag>\n                  <jvmFlag>-Dcoherence.machine=server2</jvmFlag>\n                  <jvmFlag>-Dcoherence.site=Site1</jvmFlag>\n                  <jvmFlag>-Dcoherence.log.level=9</jvmFlag>\n                  <jvmFlag>-Dcoherence.management.http=all</jvmFlag>\n                  <jvmFlag>-Dcoherence.management.http.port=30000</jvmFlag>\n                  <jvmFlag>-Dcoherence.management.refresh.expiry=1s</jvmFlag>\n                  <jvmFlag>-Dcoherence.distributed.localstorage=true</jvmFlag>\n                  <jvmFlag>-Dcoherence.metrics.http.enabled=true</jvmFlag>\n                  <jvmFlag>-Dcoherence.metrics.http.port=9613</jvmFlag>\n                  <jvmFlag>-Dcoherence.cacheconfig=${coherence.cache.config}</jvmFlag>\n                </jvmFlags>\n                <mainClass>com.oracle.coherence.python.testing.RestServer</mainClass>\n                <format>OCI</format>\n              </container>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/java/pom.xml b/tests/java/pom.xml
--- a/tests/java/pom.xml	(revision f76d8f67a09b62e50b30c29a112f42ee9e5ac58d)
+++ b/tests/java/pom.xml	(date 1685585599096)
@@ -40,13 +40,13 @@
     <coherence.test.groupId>com.oracle.coherence.ce</coherence.test.groupId>
     <coherence.test.version>${coherence.version}</coherence.test.version>
 
-    <coherence.test.base.image>gcr.io/distroless/java:11</coherence.test.base.image>
+    <coherence.test.base.image>gcr.io/distroless/java17-debian11:latest-arm64</coherence.test.base.image>
 
     <!-- library dependency versions -->
     <version.lib.asciidoctor.diagram>2.2.1</version.lib.asciidoctor.diagram>
     <version.lib.commonjava.directory>1.0</version.lib.commonjava.directory>
     <version.plugin.helidon-build-tools>2.0.0-M3</version.plugin.helidon-build-tools>
-    <version.plugin.jib>3.3.0</version.plugin.jib>
+    <version.plugin.jib>3.3.2</version.plugin.jib>
     <version.plugin.maven.assembly>3.3.0</version.plugin.maven.assembly>
     <version.plugin.maven.compiler>3.7.0</version.plugin.maven.compiler>
     <version.plugin.maven.dependency>3.2.0</version.plugin.maven.dependency>
