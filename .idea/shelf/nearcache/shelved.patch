Index: src/coherence/client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n# Licensed under the Universal Permissive License v 1.0 as shown at\n# https://oss.oracle.com/licenses/upl.\n\nfrom __future__ import annotations\n\nimport abc\nimport asyncio\nimport logging\nimport os\nimport time\nimport uuid\nfrom asyncio import Condition, Event, Task\nfrom contextlib import asynccontextmanager\nfrom threading import Lock\nfrom typing import (\n    Any,\n    AsyncIterator,\n    Awaitable,\n    Callable,\n    Final,\n    Generic,\n    Literal,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    TypeVar,\n    cast,\n    no_type_check,\n)\n\n# noinspection PyPackageRequirements\nimport grpc\nfrom grpc.aio import Channel, StreamStreamMultiCallable\nfrom pymitter import EventEmitter\n\nfrom .aggregator import AverageAggregator, EntryAggregator, PriorityAggregator, SumAggregator\nfrom .cache_service_messages_v1_pb2 import MapEventMessage, NamedCacheResponse, ResponseType\nfrom .comparator import Comparator\nfrom .entry import MapEntry\nfrom .error import RequestFailedError, SessionCreationError\nfrom .event import (\n    MapEvent,\n    MapLifecycleEvent,\n    MapListener,\n    SessionLifecycleEvent,\n    _ListenerGroup,\n    _MapEventsManagerV0,\n    _MapEventsManagerV1,\n)\nfrom .extractor import ValueExtractor\nfrom .filter import Filter\nfrom .messages_pb2 import PageRequest\nfrom .processor import EntryProcessor\nfrom .proxy_service_messages_v1_pb2 import ProxyRequest, ProxyResponse\nfrom .proxy_service_v1_pb2_grpc import ProxyServiceStub\nfrom .serialization import Serializer, SerializerRegistry\nfrom .services_pb2_grpc import NamedCacheServiceStub\nfrom .util import (\n    Dispatcher,\n    PagingDispatcher,\n    RequestFactory,\n    RequestFactoryV1,\n    ResponseObserver,\n    StreamingDispatcher,\n    UnaryDispatcher,\n)\n\nE = TypeVar(\"E\")\nK = TypeVar(\"K\")\nV = TypeVar(\"V\")\nR = TypeVar(\"R\")\nT = TypeVar(\"T\")\n\nCOH_LOG = logging.getLogger(\"coherence\")\n\n\n@asynccontextmanager\nasync def request_timeout(seconds: float):  # type: ignore\n    from . import _TIMEOUT_CONTEXT_VAR\n\n    request_timeout = _TIMEOUT_CONTEXT_VAR.set(seconds)\n    try:\n        yield\n    finally:\n        _TIMEOUT_CONTEXT_VAR.reset(request_timeout)\n\n\n# noinspection PyUnresolvedReferences,PyProtectedMember\nclass _Handshake:\n    def __init__(self, session: Session):\n        self._protocol_version: int = 0\n        self._proxy_version: str = \"unknown\"\n        self._proxy_member_id: int = 0\n        self._session = session\n        self._channel: Channel = session.channel\n        self._stream: Optional[StreamStreamMultiCallable] = None\n\n    async def handshake(self) -> None:\n        stub: ProxyServiceStub = ProxyServiceStub(self._channel)\n        stream: StreamStreamMultiCallable = stub.subChannel()\n        try:\n            await stream.write(RequestFactoryV1.init_sub_channel())\n            response = await asyncio.wait_for(stream.read(), self._session.options.request_timeout_seconds)\n            stream.cancel()  # cancel the stream; no longer needed\n            self._proxy_version = response.init.version\n            self._protocol_version = response.init.protocolVersion\n            self._proxy_member_id = response.init.proxyMemberId\n        except grpc.aio._call.AioRpcError as e:\n            error_code: int = e.code().value[0]\n            if (\n                # Check for StatusCode INTERNAL as work around for\n                # grpc issue https://github.com/grpc/grpc/issues/36066\n                error_code == grpc.StatusCode.UNIMPLEMENTED.value[0]\n                or error_code == grpc.StatusCode.INTERNAL.value[0]\n            ):\n                pass\n            else:\n                raise SessionCreationError(\n                    \"Unexpected error attempting to handshake with proxy: \" + str(e.details())\n                ) from e\n        except asyncio.TimeoutError as e:\n            raise SessionCreationError(\"Handshake with proxy timed out\") from e\n        finally:\n            stream.cancel()\n\n    @property\n    def protocol_version(self) -> int:\n        return self._protocol_version\n\n    @property\n    def proxy_version(self) -> str:\n        return self._proxy_version\n\n    @property\n    def proxy_member_id(self) -> int:\n        return self._proxy_member_id\n\n\n@no_type_check\ndef _pre_call_cache(func):\n    def inner(self, *args, **kwargs):\n        if not self.active:\n            raise RuntimeError(\"Cache [] has been \" + \"released\" if self.released else \"destroyed\")\n\n        return func(self, *args, **kwargs)\n\n    async def inner_async(self, *args, **kwargs):\n        if not self.active:\n            raise RuntimeError(\n                \"Cache [{}] has been {}.\".format(self.name, \"released\" if self.released else \"destroyed\")\n            )\n\n        # noinspection PyProtectedMember\n        await self._session._wait_for_ready()\n\n        return await func(self, *args, **kwargs)\n\n    if asyncio.iscoroutinefunction(func):\n        return inner_async\n    return inner\n\n\n@no_type_check\ndef _pre_call_session(func):\n    def inner(self, *args, **kwargs):\n        if self._closed:\n            raise RuntimeError(\"Session has been closed.\")\n\n        return func(self, *args, **kwargs)\n\n    async def inner_async(self, *args, **kwargs):\n        if self._closed:\n            raise RuntimeError(\"Session has been closed.\")\n\n        return await func(self, *args, **kwargs)\n\n    if asyncio.iscoroutinefunction(func):\n        return inner_async\n    return inner\n\n\nclass NamedMap(abc.ABC, Generic[K, V]):\n    # noinspection PyUnresolvedReferences\n    \"\"\"\n    A Map-based data-structure that manages entries across one or more processes. Entries are typically managed in\n    memory, and are often comprised of data that is also stored persistently, on disk.\n\n    :param K:  the type of the map entry keys\n    :param V:  the type of the map entry values\n    \"\"\"\n\n    @property\n    @abc.abstractmethod\n    def name(self) -> str:\n        \"\"\"documentation\"\"\"\n\n    @abc.abstractmethod\n    def on(self, event: MapLifecycleEvent, callback: Callable[[str], None]) -> None:\n        \"\"\"\n        Add a callback that will be invoked when the specified MapLifecycleEvent is raised.\n        :param event:     the MapLifecycleEvent to listen for\n        :param callback:  the callback that will be invoked when the event occurs\n        \"\"\"\n\n    @property\n    @abc.abstractmethod\n    def destroyed(self) -> bool:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def released(self) -> bool:\n        pass\n\n    @property\n    def active(self) -> bool:\n        return not self.released and not self.destroyed\n\n    @abc.abstractmethod\n    async def add_map_listener(\n        self, listener: MapListener[K, V], listener_for: Optional[K | Filter] = None, lite: bool = False\n    ) -> None:\n        \"\"\"\n        Add a MapListener that will receive events (inserts, updates, deletes) that occur\n        against the map, with the key, old-value and new-value included.\n\n        :param listener:      the MapListener to register\n        :param listener_for:  the optional key that identifies the entry for which to raise events or a Filter\n         that will be passed MapEvent objects to select from; a MapEvent will be delivered to the listener only if the\n         filter evaluates to `True` for that MapEvent. `None` is equivalent to a Filter that always returns `True`\n        :param lite:          optionally pass `True` to indicate that the MapEvent objects do not have to include the\n         old or new values in order to allow optimizations\n        :raises ValueError: if `listener` is `None`\n        \"\"\"\n\n    @abc.abstractmethod\n    async def remove_map_listener(self, listener: MapListener[K, V], listener_for: Optional[K | Filter] = None) -> None:\n        \"\"\"\n        Remove a standard map listener that previously registered to receive events.\n        :param listener:      the MapListener to be removed\n        :param listener_for:  the key or filter, if any, passed to a previous addMapListener invocation\n        :raises ValueError: if `listener` is `None`\n        \"\"\"\n\n    @abc.abstractmethod\n    async def get(self, key: K) -> Optional[V]:\n        \"\"\"\n        Returns the value to which this cache maps the specified key.\n\n        :param key: the key whose associated value is to be returned\n\n        :Example:\n\n         >>> import asyncio\n         >>> from typing import Any, AsyncGenerator, Optional, TypeVar\n         >>> from coherence import NamedCache, Session\n         >>> K = TypeVar(\"K\")\n         >>> V = TypeVar(\"V\")\n         >>> R = TypeVar(\"R\")\n         >>> session: Session = Session(None)\n         >>> cache: NamedCache[Any, Any] = await session.get_cache(\"test\")\n         >>> k: str = \"one\"\n         >>> v: str = \"only-one\"\n         >>> await cache.put(k, v)\n         >>> r = await cache.get(k)\n         >>> print(r)\n         only-one\n\n        \"\"\"\n\n    @abc.abstractmethod\n    async def get_or_default(self, key: K, default_value: Optional[V] = None) -> Optional[V]:\n        \"\"\"\n        Returns the value to which the specified key is mapped, or the specified `defaultValue`\n        if this map contains no mapping for the key.\n\n        :param key: the key whose associated value is to be returned\n        :param default_value: defaultValue if this map contains no mapping for the key.\n        :return: value for the key in the map or the `defaultValue`\n        \"\"\"\n\n    @abc.abstractmethod\n    async def get_all(self, keys: set[K]) -> AsyncIterator[MapEntry[K, V]]:\n        \"\"\"\n        Get all the specified keys if they are in the map. For each key that is in the map,\n        that key and its corresponding value will be placed in the map that is returned by\n        this method. The absence of a key in the returned map indicates that it was not in the cache,\n        which may imply (for caches that can load behind the scenes) that the requested data\n        could not be loaded.\n\n        :param keys: an Iterable of keys that may be in this map\n        :return: an AsyncIterator of MapEntry instances for the specified keys passed in `keys`\n        \"\"\"\n\n    @abc.abstractmethod\n    async def put(self, key: K, value: V) -> Optional[V]:\n        \"\"\"\n        Associates the specified value with the specified key in this map. If the\n        map previously contained a mapping for this key, the old value is replaced.\n\n        :param key: the key with which the specified value is to be associated\n        :param value: the value to be associated with the specified key\n        :return: the previous value associated with the specified key, or `None`\n         if there was no mapping for key. A `None` return can also indicate\n         that the map previously associated `None` with the specified key\n         if the implementation supports `None` values\n        \"\"\"\n\n    @abc.abstractmethod\n    async def put_if_absent(self, key: K, value: V) -> Optional[V]:\n        \"\"\"\n        If the specified key is not already associated with a value (or is mapped to `None`) associates\n        it with the given value and returns `None`, else returns the current value.\n\n        :param key: the key with which the specified value is to be associated\n        :param value: the value to be associated with the specified key\n        :return: the previous value associated with the specified key, or `None` if there was no mapping for key. A\n         `None` return can also indicate that the map previously associated `None` with the specified key\n         if the implementation supports `None` values\n\n        \"\"\"\n\n    @abc.abstractmethod\n    async def put_all(self, map: dict[K, V], ttl: Optional[int] = 0) -> None:\n        \"\"\"\n        Copies all mappings from the specified map to this map\n\n        :param map: the map to copy from\n        :param ttl: the time to live for the map entries\n        \"\"\"\n\n    @abc.abstractmethod\n    async def clear(self) -> None:\n        \"\"\"\n        Clears all the mappings in the 'NamedMap'.\n\n        \"\"\"\n\n    @abc.abstractmethod\n    async def destroy(self) -> None:\n        \"\"\"\n        Release and destroy this cache.\n\n        Warning: This method is used to completely destroy the specified cache\n        across the cluster. All references in the entire cluster to this cache\n        will be invalidated, the cached data will be cleared, and all resources\n        will be released.\n        \"\"\"\n\n    @abc.abstractmethod\n    async def release(self) -> None:\n        \"\"\"\n        Release local resources associated with instance.\n\n        \"\"\"\n\n    @abc.abstractmethod\n    async def truncate(self) -> None:\n        \"\"\"\n        Truncates the cache.  Unlike :func:`coherence.client.NamedMap.clear()`, this function does not generate an\n        event for each removed entry.\n\n        \"\"\"\n\n    @abc.abstractmethod\n    async def remove(self, key: K) -> Optional[V]:\n        \"\"\"\n        Removes the mapping for a key from this map if it is present.\n\n        :param key: key whose mapping is to be removed from the map\n        :return: the previous value associated with key, or `None` if there was no mapping for key\n        \"\"\"\n\n    @abc.abstractmethod\n    async def remove_mapping(self, key: K, value: V) -> bool:\n        \"\"\"\n        Removes the entry for the specified key only if it is currently mapped to the specified value.\n\n        :param key: key with which the specified value is associated\n        :param value: expected to be associated with the specified key\n        :return: resolving to true if the value was removed\n        \"\"\"\n\n    @abc.abstractmethod\n    async def replace(self, key: K, value: V) -> Optional[V]:\n        \"\"\"\n        Replaces the entry for the specified key only if currently mapped to the specified value.\n\n        :param key: key whose associated value is to be replaced\n        :param value: value expected to be associated with the specified key\n        :return: resolving to the previous value associated with the specified key, or `None` if there was no mapping\n         for the key. (A `None` return can also indicate that the map previously associated `None` with the key\n         if the implementation supports `None` values.)\n        \"\"\"\n\n    @abc.abstractmethod\n    async def replace_mapping(self, key: K, old_value: V, new_value: V) -> bool:\n        \"\"\"\n        Replaces the entry for the specified key only if currently mapped to the specified value.\n\n        :param key:         key whose associated value is to be removed\n        :param old_value:   value expected to be associated with the specified key\n        :param new_value:   value to be associated with the specified key\n        :return: resolving to `true` if the value was replaced\n        \"\"\"\n\n    @abc.abstractmethod\n    async def contains_key(self, key: K) -> bool:\n        \"\"\"\n        Returns `true` if the specified key is mapped a value within the cache.\n\n        :param key: the key whose presence in this cache is to be tested\n        :return: resolving to `true` if the key is mapped to a value, or `false` if it does not\n        \"\"\"\n\n    @abc.abstractmethod\n    async def contains_value(self, value: V) -> bool:\n        \"\"\"\n        Returns `true` if the specified value is mapped to some key.\n\n        :param value: the value expected to be associated with some key\n        :return: resolving to `true` if a mapping exists, or `false` if it does not\n        \"\"\"\n\n    @abc.abstractmethod\n    async def is_empty(self) -> bool:\n        \"\"\"\n        Returns `true` if this map contains no key-value mappings.\n\n        :return: `true` if this map contains no key-value mappings.\n        \"\"\"\n\n    @abc.abstractmethod\n    async def size(self) -> int:\n        \"\"\"\n        Signifies the number of key-value mappings in this map.\n\n        :return: the number of key-value mappings in this map\n        \"\"\"\n\n    @abc.abstractmethod\n    async def invoke(self, key: K, processor: EntryProcessor[R]) -> Optional[R]:\n        \"\"\"\n        Invoke the passed EntryProcessor against the Entry specified by the\n        passed key, returning the result of the invocation.\n\n        :param key: the key to process - it is not required to exist within the Map\n        :param processor: the EntryProcessor to use to process the specified key\n        :return: the result of the invocation as returned from the EntryProcessor\n        \"\"\"\n\n    @abc.abstractmethod\n    async def invoke_all(\n        self, processor: EntryProcessor[R], keys: Optional[set[K]] = None, filter: Optional[Filter] = None\n    ) -> AsyncIterator[MapEntry[K, R]]:\n        \"\"\"\n        Invoke the passed EntryProcessor against the set of entries that are selected by the given Filter,\n        returning the result of the invocation for each.\n\n        Unless specified otherwise, implementations will perform this operation in two steps:\n            1. use the filter to retrieve a matching entry set\n            2. apply the agent to every filtered entry.\n\n        This algorithm assumes that the agent's processing does not affect the result of the specified filter\n        evaluation, since the filtering and processing could be performed in parallel on different threads. If this\n        assumption does not hold, the processor logic has to be idempotent, or at least re-evaluate the filter. This\n        could be easily accomplished by wrapping the processor with the ConditionalProcessor.\n\n        :param processor: the EntryProcessor to use to process the specified keys\n        :param keys: the keys to process these keys are not required to exist within the Map\n        :param filter: a Filter that results in the set of keys to be processed\n        :return: an AsyncIterator of MapEntry instances containing the results of invoking the EntryProcessor against\n         each of the specified keys\n        \"\"\"\n\n    @abc.abstractmethod\n    async def aggregate(\n        self, aggregator: EntryAggregator[R], keys: Optional[set[K]] = None, filter: Optional[Filter] = None\n    ) -> Optional[R]:\n        \"\"\"\n        Perform an aggregating operation against the entries specified by the passed keys.\n\n        :param aggregator: the EntryAggregator that is used to aggregate across the specified entries of this Map\n        :param keys: the Iterable of keys that specify the entries within this Map to aggregate across\n        :param filter: the Filter that is used to select entries within this Map to aggregate across\n        :return: the result of the invocation as returned from the EntryProcessor\n        \"\"\"\n\n    @abc.abstractmethod\n    async def values(\n        self, filter: Optional[Filter] = None, comparator: Optional[Comparator] = None, by_page: bool = False\n    ) -> AsyncIterator[V]:\n        \"\"\"\n        Return a Set of the values contained in this map that satisfy the criteria expressed by the filter.\n        If no filter or comparator is specified, it returns a Set view of the values contained in this map.The\n        collection is backed by the map, so changes to the map are reflected in the collection, and vice versa. If\n        the map is modified while an iteration over the collection is in progress (except through the iterator's own\n        `remove` operation), the results of the iteration are undefined.\n\n        :param filter: the Filter object representing the criteria that the entries of this map should satisfy\n        :param comparator:  the Comparator object which imposes an ordering on entries in the resulting set; or null\n         if the entries' natural ordering should be used\n        :param by_page: returns the keys in pages (transparently to the caller).  This option is only valid\n         if no filter or comparator is provided.\n        :return: an AsyncIterator of MapEntry instances resolving to the values that satisfy the specified criteria\n        \"\"\"\n\n    @abc.abstractmethod\n    async def keys(self, filter: Optional[Filter] = None, by_page: bool = False) -> AsyncIterator[K]:\n        \"\"\"\n        Return a set view of the keys contained in this map for entries that satisfy the criteria expressed by the\n        filter.\n\n        :param filter: the Filter object representing the criteria that the entries of this map should satisfy\n        :param by_page: returns the keys in pages (transparently to the caller).  This option is only valid\n         if no filter is provided.\n        :return: an AsyncIterator of keys for entries that satisfy the specified criteria\n        \"\"\"\n\n    @abc.abstractmethod\n    async def entries(\n        self, filter: Optional[Filter] = None, comparator: Optional[Comparator] = None, by_page: bool = False\n    ) -> AsyncIterator[MapEntry[K, V]]:\n        \"\"\"\n        Return a set view of the entries contained in this map that satisfy the criteria expressed by the filter.\n        Each element in the returned set is a :class:`coherence.client.MapEntry`.\n\n        :param filter: the Filter object representing the criteria that the entries of this map should satisfy\n        :param comparator: the Comparator object which imposes an ordering on entries in the resulting set; or `None`\n         if the entries' values natural ordering should be used\n        :param by_page: returns the keys in pages (transparently to the caller).  This option is only valid\n         if no filter or comparator is provided.\n        :return: an AsyncIterator of MapEntry instances that satisfy the specified criteria\n        \"\"\"\n\n    @abc.abstractmethod\n    def add_index(\n        self, extractor: ValueExtractor[T, E], ordered: bool = False, comparator: Optional[Comparator] = None\n    ) -> None:\n        \"\"\"\n        Add an index to this map.\n\n        :param extractor: The :class:`coherence.extractor.ValueExtractor` object that is used to extract\n                   an indexable Object from a value stored in the\n                   indexed Map. Must not be 'None'.\n        :param ordered: true if the contents of the indexed information\n                   should be ordered false otherwise.\n        :param comparator: The :class:`coherence.comparator.Comparator` object which imposes an ordering\n                   on entries in the indexed map or None if the\n                   entries' values natural ordering should be used.\n        \"\"\"\n\n    @abc.abstractmethod\n    def remove_index(self, extractor: ValueExtractor[T, E]) -> None:\n        \"\"\"\n        Removes an index on this `NamedMap`.\n\n        :param extractor: The :class:`coherence.extractor.ValueExtractor` object that is used to extract\n                  an indexable Object from a value stored in the\n                  indexed Map. Must not be 'None'.\n\n        \"\"\"\n\n\nclass NamedCache(NamedMap[K, V]):\n    # noinspection PyUnresolvedReferences\n    \"\"\"\n    A Map-based data-structure that manages entries across one or more processes. Entries are typically managed in\n    memory, and are often comprised of data that is also stored in an external system, for example, a database,\n    or data that has been assembled or calculated at some significant cost.  Such entries are referred to as being\n    `cached`.\n\n    :param K:  the type of the map entry keys\n    :param V:  the type of the map entry values\n    \"\"\"\n\n    @abc.abstractmethod\n    async def put(self, key: K, value: V, ttl: int = 0) -> Optional[V]:\n        \"\"\"\n        Associates the specified value with the specified key in this map. If the map previously contained a mapping\n        for this key, the old value is replaced.\n\n        :param key: the key with which the specified value is to be associated\n        :param value: the value to be associated with the specified key\n        :param ttl: the expiry time in millis (optional)\n        :return: resolving to the previous value associated with specified key, or `None` if there was no mapping for\n         key. A `None` return can also indicate that the map previously associated `None` with the specified key\n         if the implementation supports `None` values\n\n        \"\"\"\n\n    @abc.abstractmethod\n    async def put_if_absent(self, key: K, value: V, ttl: int = 0) -> Optional[V]:\n        \"\"\"\n        If the specified key is not already associated with a value (or is mapped to null) associates it with the\n        given value and returns `None`, else returns the current value.\n\n        :param key: the key with which the specified value is to be associated\n        :param value: the value to be associated with the specified key\n        :param ttl: the expiry time in millis (optional)\n        :return: resolving to the previous value associated with specified key, or `None` if there was no mapping for\n         key. A `None` return can also indicate that the map previously associated `None` with the specified key\n         if the implementation supports `None` values\n\n        \"\"\"\n\n\nclass NamedCacheClient(NamedCache[K, V]):\n    def __init__(self, cache_name: str, session: Session, serializer: Serializer):\n        self._cache_name: str = cache_name\n        self._serializer: Serializer = serializer\n        self._client_stub: NamedCacheServiceStub = NamedCacheServiceStub(session.channel)\n        self._request_factory: RequestFactory = RequestFactory(cache_name, session.scope, serializer)\n        self._emitter: EventEmitter = EventEmitter()\n        self._internal_emitter: EventEmitter = EventEmitter()\n        self._destroyed: bool = False\n        self._released: bool = False\n        self._session: Session = session\n\n        self._setup_event_handlers()\n\n        self._events_manager: _MapEventsManagerV0[K, V] = _MapEventsManagerV0(\n            self, session, self._client_stub, serializer, self._internal_emitter\n        )\n\n    @property\n    def name(self) -> str:\n        return self._cache_name\n\n    @property\n    def destroyed(self) -> bool:\n        return self._destroyed\n\n    @property\n    def released(self) -> bool:\n        return self._released\n\n    @_pre_call_cache\n    def on(self, event: MapLifecycleEvent, callback: Callable[[str], None]) -> None:\n        self._emitter.on(str(event.value), callback)\n\n    @_pre_call_cache\n    async def get(self, key: K) -> Optional[V]:\n        g = self._request_factory.get_request(key)\n        v = await self._client_stub.get(g)\n        if v.present:\n            return self._request_factory.serializer.deserialize(v.value)\n        else:\n            return None\n\n    @_pre_call_cache\n    async def get_or_default(self, key: K, default_value: Optional[V] = None) -> Optional[V]:\n        v: Optional[V] = await self.get(key)\n        if v is not None:\n            return v\n        else:\n            return default_value\n\n    @_pre_call_cache\n    async def get_all(self, keys: set[K]) -> AsyncIterator[MapEntry[K, V]]:\n        r = self._request_factory.get_all_request(keys)\n        stream = self._client_stub.getAll(r)\n\n        return _Stream(self._request_factory.serializer, stream, _entry_producer)\n\n    @_pre_call_cache\n    async def put(self, key: K, value: V, ttl: int = 0) -> Optional[V]:\n        p = self._request_factory.put_request(key, value, ttl)\n        v = await self._client_stub.put(p)\n        return self._request_factory.serializer.deserialize(v.value)\n\n    @_pre_call_cache\n    async def put_if_absent(self, key: K, value: V, ttl: int = 0) -> Optional[V]:\n        p = self._request_factory.put_if_absent_request(key, value, ttl)\n        v = await self._client_stub.putIfAbsent(p)\n        return self._request_factory.serializer.deserialize(v.value)\n\n    @_pre_call_cache\n    async def put_all(self, map: dict[K, V]) -> None:\n        p = self._request_factory.put_all_request(map)\n        await self._client_stub.putAll(p)\n\n    @_pre_call_cache\n    async def clear(self) -> None:\n        r = self._request_factory.clear_request()\n        await self._client_stub.clear(r)\n\n    async def destroy(self) -> None:\n        await self.release()\n        self._internal_emitter.once(MapLifecycleEvent.DESTROYED.value)\n        self._internal_emitter.emit(MapLifecycleEvent.DESTROYED.value, self.name)\n        r = self._request_factory.destroy_request()\n        await self._client_stub.destroy(r)\n\n    async def release(self) -> None:\n        if self.active:\n            self._internal_emitter.once(MapLifecycleEvent.RELEASED.value)\n            self._internal_emitter.emit(MapLifecycleEvent.RELEASED.value, self.name)\n\n    @_pre_call_cache\n    async def truncate(self) -> None:\n        self._internal_emitter.once(MapLifecycleEvent.TRUNCATED.value)\n        r = self._request_factory.truncate_request()\n        await self._client_stub.truncate(r)\n\n    @_pre_call_cache\n    async def remove(self, key: K) -> Optional[V]:\n        r = self._request_factory.remove_request(key)\n        v = await self._client_stub.remove(r)\n        return self._request_factory.serializer.deserialize(v.value)\n\n    @_pre_call_cache\n    async def remove_mapping(self, key: K, value: V) -> bool:\n        r = self._request_factory.remove_mapping_request(key, value)\n        v = await self._client_stub.removeMapping(r)\n        return self._request_factory.serializer.deserialize(v.value)\n\n    @_pre_call_cache\n    async def replace(self, key: K, value: V) -> Optional[V]:\n        r = self._request_factory.replace_request(key, value)\n        v = await self._client_stub.replace(r)\n        return self._request_factory.serializer.deserialize(v.value)\n\n    @_pre_call_cache\n    async def replace_mapping(self, key: K, old_value: V, new_value: V) -> bool:\n        r = self._request_factory.replace_mapping_request(key, old_value, new_value)\n        v = await self._client_stub.replaceMapping(r)\n        return self._request_factory.serializer.deserialize(v.value)\n\n    @_pre_call_cache\n    async def contains_key(self, key: K) -> bool:\n        r = self._request_factory.contains_key_request(key)\n        v = await self._client_stub.containsKey(r)\n        return self._request_factory.serializer.deserialize(v.value)\n\n    @_pre_call_cache\n    async def contains_value(self, value: V) -> bool:\n        r = self._request_factory.contains_value_request(value)\n        v = await self._client_stub.containsValue(r)\n        return self._request_factory.serializer.deserialize(v.value)\n\n    @_pre_call_cache\n    async def is_empty(self) -> bool:\n        r = self._request_factory.is_empty_request()\n        v = await self._client_stub.isEmpty(r)\n        return self._request_factory.serializer.deserialize(v.value)\n\n    @_pre_call_cache\n    async def size(self) -> int:\n        r = self._request_factory.size_request()\n        v = await self._client_stub.size(r)\n        return self._request_factory.serializer.deserialize(v.value)\n\n    @_pre_call_cache\n    async def invoke(self, key: K, processor: EntryProcessor[R]) -> Optional[R]:\n        r = self._request_factory.invoke_request(key, processor)\n        v = await self._client_stub.invoke(r)\n        return self._request_factory.serializer.deserialize(v.value)\n\n    @_pre_call_cache\n    async def invoke_all(\n        self, processor: EntryProcessor[R], keys: Optional[set[K]] = None, filter: Optional[Filter] = None\n    ) -> AsyncIterator[MapEntry[K, R]]:\n        r = self._request_factory.invoke_all_request(processor, keys, filter)\n        stream = self._client_stub.invokeAll(r)\n\n        return _Stream(self._request_factory.serializer, stream, _entry_producer)\n\n    @_pre_call_cache\n    async def aggregate(\n        self, aggregator: EntryAggregator[R], keys: Optional[set[K]] = None, filter: Optional[Filter] = None\n    ) -> Optional[R]:\n        r = self._request_factory.aggregate_request(aggregator, keys, filter)\n        results = await self._client_stub.aggregate(r)\n        value: Any = self._request_factory.serializer.deserialize(results.value)\n        # for compatibility with 22.06\n        if isinstance(aggregator, SumAggregator) and isinstance(value, str):\n            return cast(R, float(value))\n        elif isinstance(aggregator, AverageAggregator) and isinstance(value, str):\n            return cast(R, float(value))\n        elif isinstance(aggregator, PriorityAggregator):\n            # noinspection PyTypeChecker,PyUnresolvedReferences\n            pri_agg: PriorityAggregator[R] = aggregator\n            if (\n                isinstance(pri_agg.aggregator, AverageAggregator) or isinstance(pri_agg.aggregator, SumAggregator)\n            ) and isinstance(value, str):\n                return cast(R, float(value))\n        # end compatibility with 22.06\n\n        return cast(R, value)\n\n    @_pre_call_cache\n    async def values(\n        self, filter: Optional[Filter] = None, comparator: Optional[Comparator] = None, by_page: bool = False\n    ) -> AsyncIterator[V]:\n        if by_page and comparator is None and filter is None:\n            return _PagedStream(self, _scalar_deserializer)\n        else:\n            r = self._request_factory.values_request(filter)\n            stream = self._client_stub.values(r)\n\n            return _Stream(self._request_factory.serializer, stream, _scalar_producer)\n\n    @_pre_call_cache\n    async def keys(self, filter: Optional[Filter] = None, by_page: bool = False) -> AsyncIterator[K]:\n        if by_page and filter is None:\n            return _PagedStream(self, _scalar_deserializer, True)\n        else:\n            r = self._request_factory.keys_request(filter)\n            stream = self._client_stub.keySet(r)\n\n            return _Stream(self._request_factory.serializer, stream, _scalar_producer)\n\n    @_pre_call_cache\n    async def entries(\n        self, filter: Optional[Filter] = None, comparator: Optional[Comparator] = None, by_page: bool = False\n    ) -> AsyncIterator[MapEntry[K, V]]:\n        if by_page and comparator is None and filter is None:\n            return _PagedStream(self, _entry_deserializer)\n        else:\n            r = self._request_factory.entries_request(filter, comparator)\n            stream = self._client_stub.entrySet(r)\n\n            return _Stream(self._request_factory.serializer, stream, _entry_producer)\n\n    from .event import MapListener\n\n    # noinspection PyProtectedMember\n    @_pre_call_cache\n    async def add_map_listener(\n        self, listener: MapListener[K, V], listener_for: Optional[K | Filter] = None, lite: bool = False\n    ) -> None:\n        if listener is None:\n            raise ValueError(\"A MapListener must be specified\")\n\n        if listener_for is None or isinstance(listener_for, Filter):\n            await self._events_manager._register_filter_listener(listener, listener_for, lite)\n        else:\n            await self._events_manager._register_key_listener(listener, listener_for, lite)\n\n    # noinspection PyProtectedMember\n    @_pre_call_cache\n    async def remove_map_listener(self, listener: MapListener[K, V], listener_for: Optional[K | Filter] = None) -> None:\n        if listener is None:\n            raise ValueError(\"A MapListener must be specified\")\n\n        if listener_for is None or isinstance(listener_for, Filter):\n            await self._events_manager._remove_filter_listener(listener, listener_for)\n        else:\n            await self._events_manager._remove_key_listener(listener, listener_for)\n\n    @_pre_call_cache\n    async def add_index(\n        self, extractor: ValueExtractor[T, E], ordered: bool = False, comparator: Optional[Comparator] = None\n    ) -> None:\n        if extractor is None:\n            raise ValueError(\"A ValueExtractor must be specified\")\n        r = self._request_factory.add_index_request(extractor, ordered, comparator)\n        await self._client_stub.addIndex(r)\n\n    @_pre_call_cache\n    async def remove_index(self, extractor: ValueExtractor[T, E]) -> None:\n        if extractor is None:\n            raise ValueError(\"A ValueExtractor must be specified\")\n        r = self._request_factory.remove_index_request(extractor)\n        await self._client_stub.removeIndex(r)\n\n    def _setup_event_handlers(self) -> None:\n        \"\"\"\n        Setup handlers to notify cache-level handlers of events.\n        \"\"\"\n        emitter: EventEmitter = self._emitter\n        internal_emitter: EventEmitter = self._internal_emitter\n        this: NamedCacheClient[K, V] = self\n        cache_name = self._cache_name\n\n        # noinspection PyProtectedMember\n        def on_destroyed(name: str) -> None:\n            if name == cache_name and not this.destroyed:\n                this._events_manager._close()\n                this._destroyed = True\n                emitter.emit(MapLifecycleEvent.DESTROYED.value, name)\n\n        # noinspection PyProtectedMember\n        def on_released(name: str) -> None:\n            if name == cache_name and not this.released:\n                this._events_manager._close()\n                this._released = True\n                emitter.emit(MapLifecycleEvent.RELEASED.value, name)\n\n        def on_truncated(name: str) -> None:\n            if name == cache_name:\n                emitter.emit(MapLifecycleEvent.TRUNCATED.value, name)\n\n        internal_emitter.on(MapLifecycleEvent.DESTROYED.value, on_destroyed)\n        internal_emitter.on(MapLifecycleEvent.RELEASED.value, on_released)\n        internal_emitter.on(MapLifecycleEvent.TRUNCATED.value, on_truncated)\n\n    def __str__(self) -> str:\n        return (\n            f\"NamedCache(name={self.name}, session={self._session.session_id}, serializer={self._serializer},\"\n            f\" released={self.released}, destroyed={self.destroyed})\"\n        )\n\n\nclass NamedCacheClientV1(NamedCache[K, V]):\n\n    def __init__(self, cache_name: str, session: Session, serializer: Serializer):\n        self._cache_name: str = cache_name\n        self._cache_id: int = 0\n        self._serializer: Serializer = serializer\n        self._request_factory: RequestFactoryV1 = RequestFactoryV1(\n            cache_name, self._cache_id, session.scope, serializer, lambda: session.options.request_timeout_seconds\n        )\n        self._emitter: EventEmitter = EventEmitter()\n        self._internal_emitter: EventEmitter = EventEmitter()\n        self._destroyed: bool = False\n        self._released: bool = False\n        self._session: Session = session\n\n        self._events_manager: _MapEventsManagerV1[K, V] = _MapEventsManagerV1(\n            self, session, serializer, self._internal_emitter, self._request_factory\n        )\n\n        self._stream_handler: StreamHandler = StreamHandler(session, self._request_factory, self._events_manager)\n        self._setup_event_handlers()\n\n    def _setup_event_handlers(self) -> None:\n        \"\"\"\n        Setup handlers to notify cache-level handlers of events.\n        \"\"\"\n        emitter: EventEmitter = self._emitter\n        internal_emitter: EventEmitter = self._internal_emitter\n        this: NamedCacheClientV1[K, V] = self\n        cache_name = self._cache_name\n\n        # noinspection PyProtectedMember\n        def on_destroyed(name: str) -> None:\n            if name == cache_name and not this.destroyed:\n                this._events_manager._close()\n                this._destroyed = True\n                this._released = True\n                emitter.emit(MapLifecycleEvent.DESTROYED.value, name)\n\n        # noinspection PyProtectedMember\n        def on_released(name: str) -> None:\n            if name == cache_name and not this.released:\n                this._events_manager._close()\n                this._released = True\n                emitter.emit(MapLifecycleEvent.RELEASED.value, name)\n\n        def on_truncated(name: str) -> None:\n            if name == cache_name:\n                emitter.emit(MapLifecycleEvent.TRUNCATED.value, name)\n\n        internal_emitter.on(MapLifecycleEvent.DESTROYED.value, on_destroyed)\n        internal_emitter.on(MapLifecycleEvent.RELEASED.value, on_released)\n        internal_emitter.on(MapLifecycleEvent.TRUNCATED.value, on_truncated)\n\n    @property\n    def cache_id(self) -> int:\n        return self._cache_id\n\n    @cache_id.setter\n    def cache_id(self, cache_id: int) -> None:\n        self._cache_id = cache_id\n\n    @property\n    def name(self) -> str:\n        return self._cache_name\n\n    def on(self, event: MapLifecycleEvent, callback: Callable[[str], None]) -> None:\n        self._emitter.on(str(event.value), callback)\n\n    @property\n    def destroyed(self) -> bool:\n        return self._destroyed\n\n    @property\n    def released(self) -> bool:\n        return self._released\n\n    async def _ensure_cache(self) -> None:\n        dispatcher: UnaryDispatcher[int] = self._request_factory.ensure_request(self._cache_name)\n        await dispatcher.dispatch(self._stream_handler)\n\n        self.cache_id = dispatcher.result()\n        self._request_factory.cache_id = self.cache_id\n\n    @_pre_call_cache\n    async def get(self, key: K) -> Optional[V]:\n        dispatcher: UnaryDispatcher[Optional[V]] = self._request_factory.get_request(key)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    @_pre_call_cache\n    async def put(self, key: K, value: V, ttl: int = 0) -> Optional[V]:\n        dispatcher: UnaryDispatcher[Optional[V]] = self._request_factory.put_request(key, value, ttl)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    @_pre_call_cache\n    async def put_if_absent(self, key: K, value: V, ttl: int = 0) -> Optional[V]:\n        dispatcher: UnaryDispatcher[Optional[V]] = self._request_factory.put_if_absent_request(key, value, ttl)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    # noinspection PyProtectedMember\n    @_pre_call_cache\n    async def add_map_listener(\n        self, listener: MapListener[K, V], listener_for: Optional[K | Filter] = None, lite: bool = False\n    ) -> None:\n        if listener is None:\n            raise ValueError(\"A MapListener must be specified\")\n\n        if listener_for is None or isinstance(listener_for, Filter):\n            await self._events_manager._register_filter_listener(listener, listener_for, lite)\n        else:\n            await self._events_manager._register_key_listener(listener, listener_for, lite)\n\n    # noinspection PyProtectedMember\n    @_pre_call_cache\n    async def remove_map_listener(self, listener: MapListener[K, V], listener_for: Optional[K | Filter] = None) -> None:\n        if listener is None:\n            raise ValueError(\"A MapListener must be specified\")\n\n        if listener_for is None or isinstance(listener_for, Filter):\n            await self._events_manager._remove_filter_listener(listener, listener_for)\n        else:\n            await self._events_manager._remove_key_listener(listener, listener_for)\n\n    @_pre_call_cache\n    async def get_or_default(self, key: K, default_value: Optional[V] = None) -> Optional[V]:\n        v: Optional[V] = await self.get(key)\n        if v is not None:\n            return v\n        else:\n            return default_value\n\n    @_pre_call_cache\n    async def get_all(self, keys: set[K]) -> AsyncIterator[MapEntry[K, V]]:\n        dispatcher: StreamingDispatcher[MapEntry[K, V]] = self._request_factory.get_all_request(keys)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher\n\n    @_pre_call_cache\n    async def put_all(self, kv_map: dict[K, V], ttl: Optional[int] = 0) -> None:\n        dispatcher: Dispatcher = self._request_factory.put_all_request(kv_map, ttl)\n        await dispatcher.dispatch(self._stream_handler)\n\n    @_pre_call_cache\n    async def clear(self) -> None:\n        dispatcher: Dispatcher = self._request_factory.clear_request()\n        await dispatcher.dispatch(self._stream_handler)\n\n    async def destroy(self) -> None:\n        self._internal_emitter.once(MapLifecycleEvent.DESTROYED.value)\n        self._internal_emitter.emit(MapLifecycleEvent.DESTROYED.value, self.name)\n        dispatcher: Dispatcher = self._request_factory.destroy_request()\n        await dispatcher.dispatch(self._stream_handler)\n\n    async def release(self) -> None:\n        if self.active:\n            await self._stream_handler.close()\n            self._internal_emitter.once(MapLifecycleEvent.RELEASED.value)\n            self._internal_emitter.emit(MapLifecycleEvent.RELEASED.value, self.name)\n\n    @_pre_call_cache\n    async def truncate(self) -> None:\n        dispatcher: Dispatcher = self._request_factory.truncate_request()\n        await dispatcher.dispatch(self._stream_handler)\n\n    @_pre_call_cache\n    async def remove(self, key: K) -> Optional[V]:\n        dispatcher: UnaryDispatcher[Optional[V]] = self._request_factory.remove_request(key)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    @_pre_call_cache\n    async def remove_mapping(self, key: K, value: V) -> bool:\n        dispatcher: UnaryDispatcher[bool] = self._request_factory.remove_mapping_request(key, value)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    @_pre_call_cache\n    async def replace(self, key: K, value: V) -> Optional[V]:\n        dispatcher: UnaryDispatcher[Optional[V]] = self._request_factory.replace_request(key, value)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    @_pre_call_cache\n    async def replace_mapping(self, key: K, old_value: V, new_value: V) -> bool:\n        dispatcher: UnaryDispatcher[bool] = self._request_factory.replace_mapping_request(key, old_value, new_value)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    @_pre_call_cache\n    async def contains_key(self, key: K) -> bool:\n        dispatcher: UnaryDispatcher[bool] = self._request_factory.contains_key_request(key)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    @_pre_call_cache\n    async def contains_value(self, value: V) -> bool:\n        dispatcher: UnaryDispatcher[bool] = self._request_factory.contains_value_request(value)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    @_pre_call_cache\n    async def is_empty(self) -> bool:\n        dispatcher: UnaryDispatcher[bool] = self._request_factory.is_empty_request()\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    @_pre_call_cache\n    async def size(self) -> int:\n        dispatcher: UnaryDispatcher[int] = self._request_factory.size_request()\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    @_pre_call_cache\n    async def invoke(self, key: K, processor: EntryProcessor[R]) -> Optional[R]:\n        dispatcher: UnaryDispatcher[Optional[R]] = self._request_factory.invoke_request(key, processor)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    @_pre_call_cache\n    async def invoke_all(\n        self, processor: EntryProcessor[R], keys: Optional[set[K]] = None, filter: Optional[Filter] = None\n    ) -> AsyncIterator[MapEntry[K, R]]:\n        dispatcher: StreamingDispatcher[MapEntry[K, R]] = self._request_factory.invoke_all_request(\n            processor, keys, filter\n        )\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher\n\n    @_pre_call_cache\n    async def aggregate(\n        self, aggregator: EntryAggregator[R], keys: Optional[set[K]] = None, filter: Optional[Filter] = None\n    ) -> Optional[R]:\n        dispatcher: UnaryDispatcher[Optional[R]] = self._request_factory.aggregate_request(aggregator, keys, filter)\n        await dispatcher.dispatch(self._stream_handler)\n        return dispatcher.result()\n\n    # TODO\n    @_pre_call_cache\n    async def values(\n        self, filter: Optional[Filter] = None, comparator: Optional[Comparator] = None, by_page: bool = False\n    ) -> AsyncIterator[V]:\n        if by_page and comparator is None and filter is None:\n            page_dispatcher: PagingDispatcher[V] = self._request_factory.page_request(values_only=True)\n            await page_dispatcher.dispatch(self._stream_handler)\n            return page_dispatcher\n        else:\n            dispatcher: StreamingDispatcher[V] = self._request_factory.values_request(filter, comparator)\n            await dispatcher.dispatch(self._stream_handler)\n            return dispatcher\n\n    # TODO\n    @_pre_call_cache\n    async def keys(self, filter: Optional[Filter] = None, by_page: bool = False) -> AsyncIterator[K]:\n        if by_page and filter is None:\n            page_dispatcher: PagingDispatcher[K] = self._request_factory.page_request(keys_only=True)\n            await page_dispatcher.dispatch(self._stream_handler)\n            return page_dispatcher\n        else:\n            dispatcher: StreamingDispatcher[K] = self._request_factory.keys_request(filter)\n            await dispatcher.dispatch(self._stream_handler)\n            return dispatcher\n\n    # TODO\n    @_pre_call_cache\n    async def entries(\n        self, filter: Optional[Filter] = None, comparator: Optional[Comparator] = None, by_page: bool = False\n    ) -> AsyncIterator[MapEntry[K, V]]:\n        if by_page and comparator is None and filter is None:\n            page_dispatcher: PagingDispatcher[MapEntry[K, V]] = self._request_factory.page_request()\n            await page_dispatcher.dispatch(self._stream_handler)\n            return page_dispatcher\n        else:\n            dispatcher: StreamingDispatcher[MapEntry[K, V]] = self._request_factory.entries_request(filter, comparator)\n            await dispatcher.dispatch(self._stream_handler)\n            return dispatcher\n\n    @_pre_call_cache\n    async def add_index(\n        self, extractor: ValueExtractor[T, E], ordered: bool = False, comparator: Optional[Comparator] = None\n    ) -> None:\n        if extractor is None:\n            raise ValueError(\"A ValueExtractor must be specified\")\n\n        dispatcher: Dispatcher = self._request_factory.add_index_request(extractor, ordered, comparator)\n        await dispatcher.dispatch(self._stream_handler)\n\n    @_pre_call_cache\n    async def remove_index(self, extractor: ValueExtractor[T, E]) -> None:\n        if extractor is None:\n            raise ValueError(\"A ValueExtractor must be specified\")\n\n        dispatcher: Dispatcher = self._request_factory.remove_index_request(extractor)\n        await dispatcher.dispatch(self._stream_handler)\n\n\nclass TlsOptions:\n    \"\"\"\n    Options specific to the configuration of TLS.\n    \"\"\"\n\n    ENV_CA_CERT = \"COHERENCE_TLS_CERTS_PATH\"\n    \"\"\"\n    Environment variable to configure the path to CA certificates\n    \"\"\"\n    ENV_CLIENT_CERT = \"COHERENCE_TLS_CLIENT_CERT\"\n    \"\"\"\n    Environment variable to configure the path to client certificates\n    \"\"\"\n    ENV_CLIENT_KEY = \"COHERENCE_TLS_CLIENT_KEY\"\n    \"\"\"\n    Environment variable to configure the path to client key\n    \"\"\"\n\n    def __init__(\n        self,\n        locked: bool = False,\n        enabled: bool = False,\n        ca_cert_path: str | None = None,\n        client_cert_path: str | None = None,\n        client_key_path: str | None = None,\n    ) -> None:\n        \"\"\"\n        Construct a new :func:`coherence.client.TlsOptions`\n\n        :param locked: If `true`, prevents further mutations to the options.\n        :param enabled: Enable/disable TLS support.\n        :param ca_cert_path: the path to the CA certificate. If not specified then its configured using the\n            environment variable COHERENCE_TLS_CERTS_PATH\n        :param client_cert_path: the path to the client certificate. If not specified then its configured using the\n            environment variable COHERENCE_TLS_CLIENT_CERT\n        :param client_key_path: the path to the client certificate key. If not specified then its configured using the\n            environment variable COHERENCE_TLS_CLIENT_KEY\n        \"\"\"\n        self._locked = locked\n        self._enabled = enabled\n\n        self._ca_cert_path = os.getenv(TlsOptions.ENV_CA_CERT, ca_cert_path)\n        self._client_cert_path = os.getenv(TlsOptions.ENV_CLIENT_CERT, client_cert_path)\n        self._client_key_path = os.getenv(TlsOptions.ENV_CLIENT_KEY, client_key_path)\n\n    @property\n    def enabled(self) -> bool:\n        \"\"\"\n        Property to set/get the boolean state if TLS is enabled(true) or disabled(false)\n        \"\"\"\n        return self._enabled\n\n    @enabled.setter\n    def enabled(self, enabled: bool) -> None:\n        if self.is_locked():\n            return\n        else:\n            self._enabled = enabled\n\n    @property\n    def ca_cert_path(self) -> Optional[str]:\n        \"\"\"\n        Property to set/get the path to the CA certificate\n        \"\"\"\n        return self._ca_cert_path\n\n    @ca_cert_path.setter\n    def ca_cert_path(self, ca_cert_path: str) -> None:\n        if self.is_locked():\n            return\n        else:\n            self._ca_cert_path = ca_cert_path\n\n    @property\n    def client_cert_path(self) -> Optional[str]:\n        \"\"\"\n        Property to set/get the path to the client certificate.\n        \"\"\"\n        return self._client_cert_path\n\n    @client_cert_path.setter\n    def client_cert_path(self, client_cert_path: str) -> None:\n        if self.is_locked():\n            return\n        else:\n            self._client_cert_path = client_cert_path\n\n    @property\n    def client_key_path(self) -> Optional[str]:\n        \"\"\"\n        Property to set/get the path to the client certificate key.\n        \"\"\"\n        return self._client_key_path\n\n    @client_key_path.setter\n    def client_key_path(self, client_key_path: str) -> None:\n        if self.is_locked():\n            return\n        else:\n            self._client_key_path = client_key_path\n\n    def locked(self) -> None:\n        \"\"\"\n        Once called, no further mutations can be made.\n        \"\"\"\n        self._locked = True\n\n    def is_locked(self) -> bool:\n        return self._locked\n\n    def __str__(self) -> str:\n        return (\n            f\"TlsOptions(enabled={self.enabled}, ca-cert-path={self.ca_cert_path}, \"\n            f\"client-cert-path={self.client_cert_path}, client-key-path={self.client_key_path})\"\n        )\n\n\nclass Options:\n    \"\"\"\n    Supported :func:`coherence.client.Session` options.\n    \"\"\"\n\n    ENV_SERVER_ADDRESS = \"COHERENCE_SERVER_ADDRESS\"\n    \"\"\"\n    Environment variable to specify the Coherence gRPC server address for the client to connect to. The\n    environment variable is used if address is not passed as an argument in the constructor. If the environment\n    variable is not set and address is not passed as an argument then `DEFAULT_ADDRESS` is used\n    \"\"\"\n    ENV_REQUEST_TIMEOUT = \"COHERENCE_CLIENT_REQUEST_TIMEOUT\"\n    \"\"\"\n    Environment variable to specify the request timeout for each remote call. The environment variable is used if\n    request timeout is not passed as an argument in the constructor. If the environment variable is not set and\n    request timeout is not passed as an argument then `DEFAULT_REQUEST_TIMEOUT` of 30 seconds is used\n    \"\"\"\n    ENV_READY_TIMEOUT = \"COHERENCE_READY_TIMEOUT\"\n    \"\"\"\n    Environment variable to specify the maximum amount of time an NamedMap or NamedCache operations may wait for the\n    underlying gRPC channel to be ready.  This is independent of the request timeout which sets a deadline on how\n    long the call may take after being dispatched.\n    \"\"\"\n    ENV_SESSION_DISCONNECT_TIMEOUT = \"COHERENCE_SESSION_DISCONNECT_TIMEOUT\"\n    \"\"\"\n    Environment variable to specify the maximum amount of time, in seconds, a Session may remain in a disconnected\n    state without successfully reconnecting.\n    \"\"\"\n\n    DEFAULT_ADDRESS: Final[str] = \"localhost:1408\"\n    \"\"\"The default target address to connect to Coherence gRPC server.\"\"\"\n    DEFAULT_SCOPE: Final[str] = \"\"\n    \"\"\"The default scope.\"\"\"\n    DEFAULT_REQUEST_TIMEOUT: Final[float] = 30.0\n    \"\"\"The default request timeout.\"\"\"\n    DEFAULT_READY_TIMEOUT: Final[float] = 0\n    \"\"\"\n    The default ready timeout is 0 which disables the feature by default.  Explicitly configure the ready timeout\n    session option or use the environment variable to specify a positive value indicating how many seconds an RPC will\n    wait for the underlying channel to be ready before failing.\n    \"\"\"\n    DEFAULT_SESSION_DISCONNECT_TIMEOUT: Final[float] = 30.0\n    \"\"\"\n    The default maximum time a session may be in a disconnected state without having successfully reconnected.\n    \"\"\"\n    DEFAULT_FORMAT: Final[str] = \"json\"\n    \"\"\"The default serialization format\"\"\"\n\n    def __init__(\n        self,\n        address: str = DEFAULT_ADDRESS,\n        scope: str = DEFAULT_SCOPE,\n        request_timeout_seconds: float = DEFAULT_REQUEST_TIMEOUT,\n        ready_timeout_seconds: float = DEFAULT_READY_TIMEOUT,\n        session_disconnect_seconds: float = DEFAULT_SESSION_DISCONNECT_TIMEOUT,\n        ser_format: str = DEFAULT_FORMAT,\n        channel_options: Optional[Sequence[Tuple[str, Any]]] = None,\n        tls_options: Optional[TlsOptions] = None,\n    ) -> None:\n        \"\"\"\n        Construct a new :func:`coherence.client.Options`\n\n        :param address: Address of the target Coherence cluster.  If not explicitly set, this defaults\n          to :func:`coherence.client.Options.DEFAULT_ADDRESS`. See\n          also :func:`coherence.client.Options.ENV_SERVER_ADDRESS`\n        :param scope: scope name used to link this :func:`coherence.client.Options` to the\n          corresponding `ConfigurableCacheFactory` on the server.\n        :param request_timeout_seconds: Defines the request timeout, in `seconds`, that will be applied to each\n          remote call. If not explicitly set, this defaults to :func:`coherence.client.Options.DEFAULT_REQUEST_TIMEOUT`.\n          See also :func:`coherence.client.Options.ENV_REQUEST_TIMEOUT`\n        :param ready_timeout_seconds: Defines the ready timeout, in `seconds`.  If this is a positive\n          float value, remote calls will not fail immediately if no connection is available.  If this is a value of zero\n          or less, then remote calls will fail-fast.  If not explicitly configured, the default of 0 is assumed.\n\n          See also :class:`coherence.client.Options.ENV_READY_TIMEOUT`\n        :param session_disconnect_seconds: Defines the maximum time, in `seconds`, that a session may remain in\n          a disconnected state without successfully reconnecting.\n        :param ser_format: The serialization format.  Currently, this is always `json`\n        :param channel_options: The `gRPC` `ChannelOptions`. See\n            https://grpc.github.io/grpc/python/glossary.html#term-channel_arguments and\n            https://github.com/grpc/grpc/blob/master/include/grpc/impl/grpc_types.h\n        :param tls_options: Optional TLS configuration.\n        \"\"\"\n        self._address = os.getenv(Options.ENV_SERVER_ADDRESS, address)\n\n        self._request_timeout_seconds = Options._get_float_from_env(\n            Options.ENV_REQUEST_TIMEOUT, request_timeout_seconds\n        )\n        self._ready_timeout_seconds = Options._get_float_from_env(Options.ENV_READY_TIMEOUT, ready_timeout_seconds)\n        self._session_disconnect_timeout_seconds = Options._get_float_from_env(\n            Options.ENV_SESSION_DISCONNECT_TIMEOUT, session_disconnect_seconds\n        )\n\n        self._scope = scope\n        self._ser_format = ser_format\n\n        if channel_options is not None:\n            self._channel_options = channel_options\n\n        if tls_options is not None:\n            self._tls_options = tls_options\n\n    @property\n    def tls_options(self) -> Optional[TlsOptions]:\n        \"\"\"\n        Returns the TLS-specific configuration options.\n\n        :return: the TLS-specific configuration options.\n        \"\"\"\n        return getattr(self, \"_tls_options\", None)\n\n    @tls_options.setter\n    def tls_options(self, tls_options: TlsOptions) -> None:\n        \"\"\"\n        Sets the TLS-specific configuration options.\n\n        :param tls_options: the TLS-specific configuration options.\n        \"\"\"\n        self._tls_options = tls_options\n\n    @property\n    def address(self) -> str:\n        \"\"\"\n        Return the IPv4 host address and port in the format of ``[host]:[port]``.\n\n        :return: the IPv4 host address and port in the format of ``[host]:[port]``.\n        \"\"\"\n        return self._address\n\n    @property\n    def scope(self) -> str:\n        \"\"\"\n        Return the scope name used to link this `Session` with to the corresponding `ConfigurableCacheFactory` on the\n        server.\n\n        :return: the scope name used to link this `Session` with to the corresponding `ConfigurableCacheFactory` on the\n         server.\n        \"\"\"\n        return self._scope\n\n    @property\n    def format(self) -> str:\n        \"\"\"\n        The serialization format used by this session.  This library currently supports JSON serialization only,\n        thus this always returns 'json'.\n\n        :return: the serialization format used by this session.\n        \"\"\"\n        return self._ser_format\n\n    @property\n    def request_timeout_seconds(self) -> float:\n        \"\"\"\n        Returns the request timeout in `seconds`\n\n        :return: the request timeout in `seconds`\n        \"\"\"\n        return self._request_timeout_seconds\n\n    @property\n    def ready_timeout_seconds(self) -> float:\n        \"\"\"\n        Returns the ready timeout in `seconds`.\n\n        :return: the ready timeout in `seconds`\n        \"\"\"\n        return self._ready_timeout_seconds\n\n    @property\n    def session_disconnect_timeout_seconds(self) -> float:\n        \"\"\"\n        Returns the ready timeout in `seconds`.\n\n        :return: the ready timeout in `seconds`\n        \"\"\"\n        return self._session_disconnect_timeout_seconds\n\n    @property\n    def channel_options(self) -> Optional[Sequence[Tuple[str, Any]]]:\n        \"\"\"\n        Return the `gRPC` `ChannelOptions`.\n\n        :return: the `gRPC` `ChannelOptions`.\n        \"\"\"\n        return getattr(self, \"_channel_options\", None)\n\n    @channel_options.setter\n    def channel_options(self, channel_options: Sequence[Tuple[str, Any]]) -> None:\n        \"\"\"\n        Set the `gRPC` `ChannelOptions`.\n\n        :param channel_options: the `gRPC` `ChannelOptions`.\n        \"\"\"\n        self._channel_options = channel_options\n\n    @staticmethod\n    def _get_float_from_env(variable_name: str, default_value: float) -> float:\n        \"\"\"\n        Return a float value parsed from the provided environment variable name.\n\n        :param variable_name: the environment variable name\n        :param default_value: the value to use if the environment variable is not set\n\n        :return: the float value from the environment or the default if the value can't be parsed\n          or the environment variable is not set\n        \"\"\"\n        timeout = os.getenv(variable_name)\n        if timeout is not None:\n            time_out: float = default_value\n            try:\n                time_out = float(timeout)\n            except ValueError:\n                COH_LOG.warning(\n                    \"The timeout value of [%s] specified by environment variable [%s] cannot be converted to a float\",\n                    timeout,\n                    variable_name,\n                )\n\n            return time_out\n        else:\n            return default_value\n\n    def __str__(self) -> str:\n        return (\n            f\"Options(address={self.address}, scope={self.scope}, format={self.format},\"\n            f\" request-timeout-seconds={self.request_timeout_seconds}, \"\n            f\"ready-timeout-seconds={self.ready_timeout_seconds}, \"\n            f\"session-disconnect-timeout-seconds={self.session_disconnect_timeout_seconds}, \"\n            f\"tls-options={self.tls_options}, \"\n            f\"channel-options={self.channel_options})\"\n        )\n\n\ndef _get_channel_creds(tls_options: TlsOptions) -> grpc.ChannelCredentials:\n    client_cert: bytes | None = None\n    client_key: bytes | None = None\n    ca_cert: bytes | None = None\n\n    if tls_options.client_cert_path is not None:\n        with open(tls_options.client_cert_path, \"rb\") as f:\n            client_cert = f.read()\n    if tls_options.client_key_path is not None:\n        with open(tls_options.client_key_path, \"rb\") as f:\n            client_key = f.read()\n    if tls_options.ca_cert_path is not None:\n        with open(tls_options.ca_cert_path, \"rb\") as f:\n            ca_cert = f.read()\n\n    credentials = grpc.ssl_channel_credentials(ca_cert, client_key, client_cert)\n\n    return credentials\n\n\nclass Session:\n    \"\"\"\n    Session represents a logical connection to an endpoint. It also acts as a factory for creating caches.\n\n    This class emits the following events:\n\n        1. :class:`coherence.event.MapLifecycleEvent.DESTROYED`: when the underlying cache is destroyed\n        2. :class:`coherence.event.MapLifecycleEvent.TRUNCATED`: When the underlying cache is truncated\n        3. :class:`coherence.event.MapLifecycleEvent.RELEASED`: When the underlying cache is released\n        4. :class:`coherence.event.SessionLifecycleEvent.CONNECT`: when the Session detects the underlying `gRPC`\n            channel has connected.\n        5. :class:`coherence.event.SessionLifecycleEvent.DISCONNECT`: when the Session detects the underlying `gRPC`\n            channel has disconnected\n        6. :class:`coherence.event.SessionLifecycleEvent.RECONNECTED`: when the Session detects the underlying `gRPC`\n            channel has re-connected\n        7. :class:`coherence.event.SessionLifecycleEvent.CLOSED`: when the Session has been closed\n\n    \"\"\"\n\n    DEFAULT_FORMAT: Final[str] = \"json\"\n    \"\"\"The default serialization format\"\"\"\n\n    def __init__(self, session_options: Optional[Options] = None):\n        \"\"\"\n        Construct a new `Session` based on the provided :func:`coherence.client.Options`\n\n        :param session_options: the provided :func:`coherence.client.Options`\n        \"\"\"\n        self._closed: bool = False\n        self._session_id: str = str(uuid.uuid4())\n        self._ready: bool = False\n        self._initialized: bool = False\n        self._ready_condition: Condition = Condition()\n        self._caches: dict[str, NamedCache[Any, Any]] = dict()\n        self._lock: Lock = Lock()\n        if session_options is not None:\n            self._session_options = session_options\n        else:\n            self._session_options = Options()\n\n        self._ready_timeout_seconds: float = self._session_options.ready_timeout_seconds\n        self._ready_enabled: bool = self._ready_timeout_seconds > 0\n\n        interceptors = [\n            _InterceptorUnaryUnary(self),\n            _InterceptorUnaryStream(self),\n            _InterceptorStreamUnary(self),\n        ]\n\n        # only add the StreamStream interceptor if ready support is enabled as\n        # when added in the non-ready case, the call will not fail-fast\n        if self._ready_enabled:\n            interceptors.append(_InterceptorStreamStream(self))\n\n        self._tasks: Set[Task[None]] = set()\n\n        options: Sequence[tuple[str, Any]] = [\n            (\"grpc.min_reconnect_backoff_ms\", 1100),\n            (\"grpc.max_reconnect_backoff_ms\", 3000),\n            (\"grpc.lb_policy_name\", \"round_robin\"),\n        ]\n\n        self._is_server_grpc_v1 = False\n        self._v1_init_response_details: dict[str, Any] = dict()\n\n        if self._session_options.tls_options is None:\n            self._channel: grpc.aio.Channel = grpc.aio.insecure_channel(\n                self._session_options.address,\n                options=(\n                    options if self._session_options.channel_options is None else self._session_options.channel_options\n                ),\n                interceptors=interceptors,\n            )\n        else:\n            creds: grpc.ChannelCredentials = _get_channel_creds(self._session_options.tls_options)\n            self._channel = grpc.aio.secure_channel(\n                self._session_options.address,\n                creds,\n                options=(\n                    options if self._session_options.channel_options is None else self._session_options.channel_options\n                ),\n                interceptors=interceptors,\n            )\n\n        self._handshake = _Handshake(self)\n\n        watch_task: Task[None] = asyncio.create_task(watch_channel_state(self))\n        self._tasks.add(watch_task)\n        self._emitter: EventEmitter = EventEmitter()\n        self._channel.get_state(True)  # trigger connect\n\n    @staticmethod\n    async def create(session_options: Optional[Options] = None) -> Session:\n        session: Session = Session(session_options)\n        await session._set_ready(False)\n        await session._handshake.handshake()\n        return session\n\n    # noinspection PyTypeHints\n    @_pre_call_session\n    def on(\n        self,\n        event: Literal[MapLifecycleEvent.DESTROYED] | Literal[MapLifecycleEvent.RELEASED] | SessionLifecycleEvent,\n        callback: Callable[[str], None] | Callable[[], None],\n    ) -> None:\n        \"\"\"\n        Register a callback to be invoked when the following events are raised:\n\n        * MapLifecycleEvent.DESTROYED\n        * MapLifecycleEvent.RELEASED\n        * Any SessionLifecycleEvent\n\n        The callbacks defined for MapLifecycleEvent DESTROYED and RELEASED should accept a single string\n        argument representing the cache name that the event was raised for.\n\n        The SessionLifecycleEvent callbacks should not accept call arguments.\n        :param event:     the event to listener for\n        :param callback:  the callback to invoke when the event is raised\n        \"\"\"\n        if event == SessionLifecycleEvent.CONNECTED and self.is_ready():\n            callback()  # type: ignore\n            return\n\n        self._emitter.on(str(event.value), callback)\n\n    @property\n    def channel(self) -> grpc.aio.Channel:\n        \"\"\"\n        Return the underlying `gRPC` Channel used by this session.\n\n        :return: the underlying `gRPC` Channel used by this session.\n        \"\"\"\n        return self._channel\n\n    @property\n    def scope(self) -> str:\n        \"\"\"\n        Return the scope name used to link this `Session` with to the corresponding `ConfigurableCacheFactory` on the\n        server.\n\n        :return: the scope name used to link this `Session` with to the corresponding `ConfigurableCacheFactory` on the\n          server.\n        \"\"\"\n        return self._session_options.scope\n\n    @property\n    def format(self) -> str:\n        \"\"\"\n        Returns the default serialization format used by the `Session`\n\n        :return: the default serialization format used by the `Session`\n        \"\"\"\n        return self._session_options.format\n\n    @property\n    def options(self) -> Options:\n        \"\"\"\n        Return the :func:`coherence.client.Options` (read-only) used to configure this session.\n\n        :return: the :func:`coherence.client.Options` (read-only) used to configure this session.\n        \"\"\"\n        return self._session_options\n\n    @property\n    def closed(self) -> bool:\n        \"\"\"\n        Returns `True` if Session is closed else `False`.\n\n        :return: `True` if Session is closed else `False`\n        \"\"\"\n        return self._closed\n\n    @property\n    def session_id(self) -> str:\n        \"\"\"\n        Returns this Session's ID.\n\n        :return: this Session's ID\n        \"\"\"\n        return self._session_id\n\n    def __str__(self) -> str:\n        if self._protocol_version > 0:\n            return (\n                f\"Session(id={self.session_id}, closed={self.closed}, state={self._channel.get_state(False)},\"\n                f\" caches/maps={len(self._caches)}, protocol-version={self._protocol_version} options={self.options}\"\n                f\" proxy-version={self._proxy_version}, proxy-member-id={self._proxy_member_id})\"\n            )\n        else:\n            return (\n                f\"Session(id={self.session_id}, closed={self.closed}, state={self._channel.get_state(False)},\"\n                f\" caches/maps={len(self._caches)}, protocol-version={self._protocol_version} options={self.options})\"\n            )\n\n    # noinspection PyProtectedMember\n    @_pre_call_session\n    async def get_cache(self, name: str, ser_format: str = DEFAULT_FORMAT) -> NamedCache[K, V]:\n        \"\"\"\n        Returns a :func:`coherence.client.NamedCache` for the specified cache name.\n\n        :param name: the cache name\n        :param ser_format: the serialization format for keys and values stored within the cache\n\n        :return: Returns a :func:`coherence.client.NamedCache` for the specified cache name.\n        \"\"\"\n        serializer = SerializerRegistry.serializer(ser_format)\n\n        if self._protocol_version == 0:\n            with self._lock:\n                c = self._caches.get(name)\n                if c is None:\n                    c = NamedCacheClient(name, self, serializer)\n                    # initialize the event stream now to ensure lifecycle listeners will work as expected\n                    await c._events_manager._ensure_stream()\n                    self._setup_event_handlers(c)\n                    self._caches.update({name: c})\n                return c\n        else:  # Server is running grpc v1\n            with self._lock:\n                c = self._caches.get(name)\n                if c is None:\n                    c = NamedCacheClientV1(name, self, serializer)\n                    await c._ensure_cache()\n                    self._setup_event_handlers(c)\n                    self._caches.update({name: c})\n                return c\n\n    # noinspection PyProtectedMember\n    @_pre_call_session\n    async def get_map(self, name: str, ser_format: str = DEFAULT_FORMAT) -> NamedMap[K, V]:\n        \"\"\"\n        Returns a :func:`coherence.client.NameMap` for the specified cache name.\n\n        :param name: the map name\n        :param ser_format: the serialization format for keys and values stored within the cache\n\n        :return: Returns a :func:`coherence.client.NamedMap` for the specified cache name.\n        \"\"\"\n        return cast(NamedMap[K, V], await self.get_cache(name, ser_format))\n\n    def is_ready(self) -> bool:\n        \"\"\"\n        Returns\n        :return:\n        \"\"\"\n        if self._closed:\n            return False\n\n        return True if not self._ready_enabled else self._ready\n\n    @property\n    def _proxy_version(self) -> str:\n        return self._handshake.proxy_version\n\n    @property\n    def _protocol_version(self) -> int:\n        return self._handshake.protocol_version\n\n    @property\n    def _proxy_member_id(self) -> int:\n        return self._handshake.proxy_member_id\n\n    async def _set_ready(self, ready: bool) -> None:\n        self._ready = ready\n        if self._ready:\n            if not self._ready_condition.locked():\n                await self._ready_condition.acquire()\n            self._ready_condition.notify_all()\n            self._ready_condition.release()\n        else:\n            await self._ready_condition.acquire()\n\n    async def _wait_for_ready(self) -> None:\n        if self._ready_enabled and not self.is_ready():\n            timeout: float = self._ready_timeout_seconds\n            COH_LOG.debug(f\"Waiting for session {self.session_id} to become active; timeout=[{timeout} seconds]\")\n            try:\n                await asyncio.wait_for(self._ready_condition.wait(), timeout)\n            except TimeoutError:\n                s = \"Deadline [{0} seconds] exceeded \" \"waiting for session {1} to become active\".format(\n                    str(timeout), self.session_id\n                )\n                raise TimeoutError(s)\n\n    # noinspection PyUnresolvedReferences\n    async def close(self) -> None:\n        \"\"\"\n        Close the `Session`\n        \"\"\"\n        if not self._closed:\n            self._closed = True\n            self._emitter.emit(SessionLifecycleEvent.CLOSED.value)\n            for task in self._tasks:\n                task.cancel()\n                await task\n            self._tasks.clear()\n\n            caches_copy: dict[str, NamedCache[Any, Any]] = self._caches.copy()\n            for cache in caches_copy.values():\n                await cache.release()\n\n            self._caches.clear()\n\n            await self._channel.close()  # TODO: consider grace period?\n            self._channel = None\n\n    def _setup_event_handlers(self, client: NamedCacheClient[K, V] | NamedCacheClientV1[K, V]) -> None:\n        this: Session = self\n\n        def on_destroyed(name: str) -> None:\n            if name in this._caches:\n                del this._caches[name]\n            self._emitter.emit(MapLifecycleEvent.DESTROYED.value, name)\n\n        def on_released(name: str) -> None:\n            if name in this._caches:\n                del this._caches[name]\n            self._emitter.emit(MapLifecycleEvent.RELEASED.value, name)\n\n        client.on(MapLifecycleEvent.DESTROYED, on_destroyed)\n        client.on(MapLifecycleEvent.RELEASED, on_released)\n\n\n# noinspection PyArgumentList\nclass _BaseInterceptor:\n    \"\"\"Base client interceptor to enable waiting for channel connectivity and\n    set call timeouts.\n    Having this base class and four concrete implementations is due to\n    https://github.com/grpc/grpc/issues/31442\"\"\"\n\n    def __init__(self, session: Session):\n        self._session: Session = session\n\n    @no_type_check  # disabling as typing info in gRPC is in protected packages\n    async def _do_intercept(self, continuation, client_call_details, request):\n        \"\"\"\n        Intercepts a gRPC call setting our specific options for the call.\n        :param continuation:         the gRPC call continuation\n        :param client_call_details:  the call details\n        :param request:              the gRPC request (if any)\n        :return:                     the result of the call\n        \"\"\"\n        from . import _TIMEOUT_CONTEXT_VAR\n\n        new_details = grpc.aio.ClientCallDetails(\n            client_call_details.method,\n            _TIMEOUT_CONTEXT_VAR.get(self._session.options.request_timeout_seconds),\n            client_call_details.metadata,\n            client_call_details.credentials,\n            True if self._session._ready_enabled else None,\n        )\n        return await continuation(new_details, request)\n\n\nclass _InterceptorUnaryUnary(_BaseInterceptor, grpc.aio.UnaryUnaryClientInterceptor):\n    \"\"\"Interceptor for Unary/Unary calls.\"\"\"\n\n    @no_type_check  # disabling as typing info in gRPC is in protected packages\n    async def intercept_unary_unary(self, continuation, client_call_details, request):\n        return await self._do_intercept(continuation, client_call_details, request)\n\n\nclass _InterceptorUnaryStream(_BaseInterceptor, grpc.aio.UnaryStreamClientInterceptor):\n    \"\"\"Interceptor for Unary/Stream calls.\"\"\"\n\n    @no_type_check  # disabling as typing info in gRPC is in protected packages\n    async def intercept_unary_stream(self, continuation, client_call_details, request):\n        return await self._do_intercept(continuation, client_call_details, request)\n\n\nclass _InterceptorStreamUnary(_BaseInterceptor, grpc.aio.StreamUnaryClientInterceptor):\n    \"\"\"Interceptor for Stream/Unary calls.\"\"\"\n\n    @no_type_check  # disabling as typing info in gRPC is in protected packages\n    async def intercept_stream_unary(self, continuation, client_call_details, request):\n        return await self._do_intercept(continuation, client_call_details, request)\n\n\nclass _InterceptorStreamStream(_BaseInterceptor, grpc.aio.StreamStreamClientInterceptor):\n    \"\"\"Interceptor for Stream/Stream calls.\"\"\"\n\n    # noinspection PyArgumentList,PyUnresolvedReferences\n    @no_type_check  # disabling as typing info in gRPC is in protected packages\n    async def intercept_stream_stream(self, continuation, client_call_details, request):\n        new_details = grpc.aio.ClientCallDetails(\n            client_call_details.method,\n            client_call_details.timeout,\n            client_call_details.metadata,\n            client_call_details.credentials,\n            True,\n        )\n\n        return await continuation(new_details, request)\n\n\n# noinspection PyProtectedMember\nasync def watch_channel_state(session: Session) -> None:\n    emitter: EventEmitter = session._emitter\n    channel: grpc.aio.Channel = session.channel\n    first_connect: bool = True\n    connected: bool = False\n    last_state: grpc.ChannelConnectivity = grpc.ChannelConnectivity.IDLE\n    disconnect_time: float = 0\n\n    def current_milli_time() -> float:\n        return round(time.time() * 1000)\n\n    try:\n        while True:\n            state: grpc.ChannelConnectivity = channel.get_state(True)\n            if COH_LOG.isEnabledFor(logging.DEBUG):\n                COH_LOG.debug(f\"New Channel State: transitioning from [{last_state}] to [{state}].\")\n            if state == grpc.ChannelConnectivity.SHUTDOWN:\n                COH_LOG.info(f\"Session [{session.session_id}] terminated.\")\n                await session._set_ready(False)\n                await session.close()\n                return\n            elif state == grpc.ChannelConnectivity.READY:\n                if not first_connect and not connected:\n                    connected = True\n                    disconnect_time = 0\n                    COH_LOG.info(f\"Session [{session.session_id} re-connected to [{session.options.address}].\")\n                    await emitter.emit_async(SessionLifecycleEvent.RECONNECTED.value)\n                    await session._set_ready(True)\n                elif first_connect and not connected:\n                    connected = True\n                    COH_LOG.info(f\"Session [{session.session_id}] connected to [{session.options.address}].\")\n\n                    first_connect = False\n                    await emitter.emit_async(SessionLifecycleEvent.CONNECTED.value)\n                    await session._set_ready(True)\n            else:\n                if connected:\n                    connected = False\n                    disconnect_time = -1\n                    COH_LOG.warning(\n                        f\"Session [{session.session_id}] disconnected from [{session.options.address}];\"\n                        f\" will attempt reconnect.\"\n                    )\n\n                    await emitter.emit_async(SessionLifecycleEvent.DISCONNECTED.value)\n                    await session._set_ready(False)\n\n                if disconnect_time != 0:\n                    if disconnect_time == -1:\n                        disconnect_time = current_milli_time()\n                    else:\n                        waited: float = current_milli_time() - disconnect_time\n                        timeout = session.options.session_disconnect_timeout_seconds\n                        if COH_LOG.isEnabledFor(logging.DEBUG):\n                            COH_LOG.debug(\n                                f\"Waited [{waited / 1000} seconds] for session [{session.session_id}] to reconnect.\"\n                                f\" [~{(round(timeout - (waited / 1000)))} seconds] remaining to reconnect.\"\n                            )\n                        if waited >= timeout:\n                            COH_LOG.error(\n                                f\"session [{session.session_id}] unable to reconnect within [{timeout} seconds.\"\n                                f\"  Closing session.\"\n                            )\n                            await session.close()\n                            return\n\n            state = channel.get_state(True)\n            if COH_LOG.isEnabledFor(logging.DEBUG):\n                COH_LOG.debug(f\"Waiting for state change from [{state}]\")\n            await channel.wait_for_state_change(state)\n    except asyncio.CancelledError:\n        return\n\n\nclass _Stream(abc.ABC, AsyncIterator[T]):\n    \"\"\"\n    A simple AsyncIterator that wraps a Callable that produces iteration\n    elements.\n    \"\"\"\n\n    def __init__(\n        self,\n        serializer: Serializer,\n        stream: grpc.Channel.unary_stream,\n        next_producer: Callable[[Serializer, grpc.Channel.unary_stream], Awaitable[T]],\n    ) -> None:\n        super().__init__()\n        # A function that may be called to produce a series of results\n        self._next_producer = next_producer\n\n        # the Serializer that should be used to deserialize results\n        self._serializer = serializer\n\n        # the gRPC stream providing results\n        self._stream = stream\n\n    def __aiter__(self) -> AsyncIterator[T]:\n        return self\n\n    def __anext__(self) -> Awaitable[T]:\n        return self._next_producer(self._serializer, self._stream)\n\n\n# noinspection PyProtectedMember\nclass _PagedStream(abc.ABC, AsyncIterator[T]):\n    \"\"\"\n    An AsyncIterator that will stream results in pages.\n    \"\"\"\n\n    def __init__(\n        self, client: NamedCacheClient[K, V], result_handler: Callable[[Serializer, Any], Any], keys: bool = False\n    ) -> None:\n        super().__init__()\n        # flag indicating that all pages have been processed\n        self._exhausted: bool = False\n\n        # the gRPC client\n        self._client: NamedCacheClient[K, V] = client\n\n        # the handler responsible for deserializing the result\n        self._result_handler: Callable[[Serializer, Any], Any] = result_handler\n\n        # the serializer to be used when deserializing streamed results\n        self._serializer: Serializer = client._request_factory.serializer\n\n        # cookie that tracks page streaming; used for each new page request\n        self._cookie: bytes = bytes()\n\n        # the gRPC stream providing the results\n        self._stream: grpc.Channel.unary_stream = None\n\n        # flag indicating a new page has been loaded\n        self._new_page: bool = True\n\n        # flag indicating that pages will be keys only\n        self._keys: bool = keys\n\n    def __aiter__(self) -> AsyncIterator[T]:\n        return self\n\n    async def __anext__(self) -> T:\n        # keep the loop running to ensure we don't exit\n        # prematurely which would result in a None value\n        # being returned incorrectly between pages\n        while True:\n            if self._stream is None and not self._exhausted:\n                await self.__load_next_page()\n\n            if self._stream is None and self._exhausted:\n                raise StopAsyncIteration\n\n            async for item in self._stream:\n                if self._new_page:  # a new page has been loaded; the cookie will be the first result\n                    self._new_page = False\n                    self._cookie = item.value if self._keys else item.cookie\n                    if self._cookie == b\"\":\n                        self._exhausted = True  # processing the last page\n                else:\n                    return self._result_handler(self._serializer, item)\n\n            self._stream = None\n            if self._exhausted:\n                raise StopAsyncIteration\n\n    # noinspection PyProtectedMember\n    async def __load_next_page(self) -> None:\n        \"\"\"\n        Requests the next page of results to be streamed.\n\n        :return: None\n        \"\"\"\n        request: PageRequest = self._client._request_factory.page_request(self._cookie)\n        self._stream = self._get_stream(request)\n        self._new_page = True\n\n    def _get_stream(self, request: PageRequest) -> grpc.Channel.unary_stream:\n        \"\"\"\n        Obtain the gRPC unary_stream for the provided PageRequest.\n\n        :param request: the PageRequest\n        :return: the gRPC unary_stream for the given request\n        \"\"\"\n        client_stub: NamedCacheServiceStub = self._client._client_stub\n        return client_stub.nextKeySetPage(request) if self._keys else client_stub.nextEntrySetPage(request)\n\n\ndef _scalar_deserializer(serializer: Serializer, item: Any) -> Any:\n    \"\"\"\n    Helper method to deserialize a key or value returned in a stream.\n\n    :param serializer: the serializer that should be used\n    :param item: the key or value to deserialize\n    :return: the deserialized key or value\n    \"\"\"\n    return serializer.deserialize(item.value)\n\n\ndef _entry_deserializer(serializer: Serializer, item: Any) -> MapEntry[Any, Any]:\n    \"\"\"\n    Helper method to deserialize entries returned in a stream.\n\n    :param serializer: the serializer that should be used to deserialize the entry\n    :param item: the entry\n    :return: the deserialized entry\n    \"\"\"\n    return MapEntry(serializer.deserialize(item.key), serializer.deserialize(item.value))\n\n\nasync def _scalar_producer(serializer: Serializer, stream: grpc.Channel.unary_stream) -> T:\n    \"\"\"\n    Helper method to iterate over a stream and produce scalar results.\n\n    :param serializer: the serializer that should be used to deserialize the scalar value\n    :param stream: the gRPC stream\n    :return: one or more deserialized scalar values\n    \"\"\"\n    async for item in stream:\n        return _scalar_deserializer(serializer, item)\n    raise StopAsyncIteration\n\n\nasync def _entry_producer(serializer: Serializer, stream: grpc.Channel.unary_stream) -> MapEntry[K, V]:\n    \"\"\"\n    Helper method to iterate over a stream and produce MapEntry instances\n    .\n    :param serializer: the serializer that should be used to deserialize the entry\n    :param stream: the gRPC stream\n    :return: one or more deserialized MapEntry instances\n    \"\"\"\n    async for item in stream:\n        return _entry_deserializer(serializer, item)\n    raise StopAsyncIteration\n\n\nasync def _entry_producer_from_list(serializer: Serializer, the_list: list[Any]) -> MapEntry[K, V]:  # type: ignore\n    if len(the_list) == 0:\n        raise StopAsyncIteration\n    for item in the_list:\n        the_list.pop(0)\n        return _entry_deserializer(serializer, item)\n\n\nclass _ListAsyncIterator(abc.ABC, AsyncIterator[T]):\n    def __init__(\n        self,\n        serializer: Serializer,\n        the_list: list[T],\n        next_producer: Callable[[Serializer, list[T]], Awaitable[T]],\n    ) -> None:\n        super().__init__()\n        # A function that may be called to produce a series of results\n        self._next_producer = next_producer\n\n        # the Serializer that should be used to deserialize results\n        self._serializer = serializer\n\n        # the gRPC stream providing results\n        self._the_list = the_list\n\n    def __aiter__(self) -> AsyncIterator[T]:\n        return self\n\n    def __anext__(self) -> Awaitable[T]:\n        return self._next_producer(self._serializer, self._the_list)\n\n\n# noinspection PyProtectedMember\nclass StreamHandler:\n    theStreamHandler = None\n\n    def __init__(\n        self,\n        session: Session,\n        request_factory: RequestFactoryV1,\n        events_manager: _MapEventsManagerV1[K, V],\n    ):\n        self._channel = session.channel\n        self._reconnect_timeout: float = session.options.session_disconnect_timeout_seconds\n        self._proxy_stub = ProxyServiceStub(session.channel)\n\n        self._request_factory: RequestFactoryV1 = request_factory\n        self._events_manager: _MapEventsManagerV1[K, V] = events_manager\n        self._stream: Optional[StreamStreamMultiCallable] = None\n        self._observers: dict[int, ResponseObserver] = dict()\n        self.result_available = Event()\n        self.result_available.clear()\n        self._background_tasks: Set[Task[Any]] = set()\n        self._closed: bool = False\n        self._connected = Event()\n        self._connected.clear()\n        self._ensure_lock = asyncio.Lock()\n\n        task = asyncio.create_task(self.handle_response())\n        task.add_done_callback(self._background_tasks.discard)\n        self._background_tasks.add(task)\n\n        def on_disconnect() -> None:\n            self._connected.clear()\n            self._stream = None\n\n        async def on_reconnect() -> None:\n            self._connected.set()\n            await self._events_manager._named_map._ensure_cache()\n            await self._events_manager._reconnect()\n\n        session.on(SessionLifecycleEvent.DISCONNECTED, on_disconnect)\n        session.on(SessionLifecycleEvent.RECONNECTED, on_reconnect)\n\n    @property\n    async def stream(self) -> StreamStreamMultiCallable:\n        await self._ensure_stream()\n\n        return self._stream\n\n    # noinspection PyUnresolvedReferences\n    async def close(self) -> None:\n        tasks: Set[Task[Any]] = set(self._background_tasks)\n        for task in tasks:\n            task.cancel()\n            await task\n\n        if self._stream is not None:\n            self._stream.cancel()\n            self._stream = None\n\n        self._closed = True\n\n    async def _ensure_stream(self) -> StreamStreamMultiCallable:\n        if self._stream is None:\n            async with self._ensure_lock:\n                if self._stream is None:\n                    stream = self._proxy_stub.subChannel()\n\n                    try:\n                        await stream.write(self._request_factory.init_sub_channel())\n                    except grpc.aio._call.AioRpcError as e:\n                        print(e)\n\n                    await stream.read()\n                    self._stream = stream  # we don't care about the result, only that it completes\n                    self._connected.set()\n\n        return self._stream\n\n    # noinspection PyUnresolvedReferences\n    async def send_proxy_request(self, proxy_request: ProxyRequest) -> None:\n        stream: StreamStreamMultiCallable = await self.stream\n        await stream.write(proxy_request)\n\n    def register_observer(self, observer: ResponseObserver) -> None:\n        assert observer.id not in self._observers\n\n        self._observers[observer.id] = observer\n\n    def deregister_observer(self, observer: ResponseObserver) -> None:\n        self._observers.pop(observer.id, None)\n\n    async def handle_response(self) -> None:\n        while not self._closed:\n            try:\n                stream: StreamStreamMultiCallable = await self.stream\n                # noinspection PyUnresolvedReferences\n                response = await stream.read()\n                response_id = response.id\n                if response_id == 0:\n                    self.handle_zero_id_response(response)\n                else:\n                    if response.HasField(\"message\"):\n                        observer = self._observers.get(response_id, None)\n                        if observer is not None:\n                            named_cache_response = NamedCacheResponse()\n                            response.message.Unpack(named_cache_response)\n                            observer._next(named_cache_response)\n                            continue\n                    elif response.HasField(\"init\"):\n                        self.result_available.set()\n                    elif response.HasField(\"error\"):\n                        observer = self._observers.get(response_id, None)\n                        if observer is not None:\n                            self._observers.pop(response_id, None)\n                            observer._err(RequestFailedError(message=response.error.message))\n                        continue\n                    elif response.HasField(\"complete\"):\n                        observer = self._observers.get(response_id, None)\n                        if observer is not None:\n                            self._observers.pop(response_id, None)\n                            observer._done()\n            except asyncio.CancelledError:\n                return\n            except grpc.aio._call.AioRpcError as e:\n                if e.code().name == \"CANCELLED\":\n                    continue\n                COH_LOG.error(\"Received unexpected error from proxy: \" + str(e))\n\n    # noinspection PyUnresolvedReferences\n    def handle_zero_id_response(self, response: ProxyResponse) -> None:\n        if response.HasField(\"message\"):\n            named_cache_response = NamedCacheResponse()\n            response.message.Unpack(named_cache_response)\n            response_type = named_cache_response.type\n            if response_type == ResponseType.Message:\n                pass\n            elif response_type == ResponseType.MapEvent:\n                # Handle MapEvent Response\n                event_response = MapEventMessage()\n                named_cache_response.message.Unpack(event_response)\n\n                if event_response.id == 0:\n                    # v0 map event received - drop on the floor\n                    return\n\n                try:\n                    event: MapEvent[Any, Any] = MapEvent(\n                        self._events_manager._named_map, event_response, self._events_manager._serializer\n                    )\n                    for _id in event_response.filterIds:\n                        filter_group: Optional[_ListenerGroup[Any, Any, Any]] = (\n                            self._events_manager._filter_id_listener_group_map.get(_id, None)\n                        )\n                        if filter_group is not None:\n                            filter_group._notify_listeners(event)\n\n                    key_group = self._events_manager._key_map.get(event.key, None)\n                    if key_group is not None:\n                        key_group._notify_listeners(event)\n                except Exception as e:\n                    COH_LOG.warning(\"Unhandled Event Message: \" + str(e))\n            elif response_type == ResponseType.Destroyed:\n                if self._events_manager._named_map.cache_id == named_cache_response.cacheId:\n                    self._events_manager._emitter.emit(\n                        MapLifecycleEvent.DESTROYED.value, self._events_manager._named_map.name\n                    )\n            elif response_type == ResponseType.Truncated:\n                if self._events_manager._named_map.cache_id == named_cache_response.cacheId:\n                    self._events_manager._emitter.emit(\n                        MapLifecycleEvent.TRUNCATED.value, self._events_manager._named_map.name\n                    )\n            else:\n                pass\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/coherence/client.py b/src/coherence/client.py
--- a/src/coherence/client.py	(revision edac2b13153f50cbb399aec89f0dfb0b6a30305b)
+++ b/src/coherence/client.py	(date 1730240997112)
@@ -181,6 +181,21 @@
     return inner
 
 
+class NearCacheOptions():
+    ttl: int = 0
+
+
+class CacheOptions:
+
+    def __init__(self, default_expiry: int = 0, near_cache_options: Optional[NearCacheOptions] = None):
+        super().__init__()
+        self._default_expiry = default_expiry
+
+    @property
+    def default_expiry(self):
+        return self._default_expiry
+
+
 class NamedMap(abc.ABC, Generic[K, V]):
     # noinspection PyUnresolvedReferences
     """
@@ -194,7 +209,12 @@
     @property
     @abc.abstractmethod
     def name(self) -> str:
-        """documentation"""
+        """Returns the logical name of this NamedMap"""
+
+    @property
+    @abc.abstractmethod
+    def session(self) -> Session:
+        """Returns the Session associated with NamedMap"""
 
     @abc.abstractmethod
     def on(self, event: MapLifecycleEvent, callback: Callable[[str], None]) -> None:
@@ -577,14 +597,15 @@
     """
 
     @abc.abstractmethod
-    async def put(self, key: K, value: V, ttl: int = 0) -> Optional[V]:
+    async def put(self, key: K, value: V, ttl: Optional[int] = None) -> Optional[V]:
         """
         Associates the specified value with the specified key in this map. If the map previously contained a mapping
         for this key, the old value is replaced.
 
         :param key: the key with which the specified value is to be associated
         :param value: the value to be associated with the specified key
-        :param ttl: the expiry time in millis (optional)
+        :param ttl: the expiry time in millis (optional).  If not specific, it will default to the default
+          ttl defined in the cache options provided when the cache was obtained
         :return: resolving to the previous value associated with specified key, or `None` if there was no mapping for
          key. A `None` return can also indicate that the map previously associated `None` with the specified key
          if the implementation supports `None` values
@@ -592,14 +613,15 @@
         """
 
     @abc.abstractmethod
-    async def put_if_absent(self, key: K, value: V, ttl: int = 0) -> Optional[V]:
+    async def put_if_absent(self, key: K, value: V, ttl: Optional[int] = None) -> Optional[V]:
         """
         If the specified key is not already associated with a value (or is mapped to null) associates it with the
         given value and returns `None`, else returns the current value.
 
         :param key: the key with which the specified value is to be associated
         :param value: the value to be associated with the specified key
-        :param ttl: the expiry time in millis (optional)
+        :param ttl: the expiry time in millis (optional).  If not specific, it will default to the default
+          ttl defined in the cache options provided when the cache was obtained.
         :return: resolving to the previous value associated with specified key, or `None` if there was no mapping for
          key. A `None` return can also indicate that the map previously associated `None` with the specified key
          if the implementation supports `None` values
@@ -608,7 +630,7 @@
 
 
 class NamedCacheClient(NamedCache[K, V]):
-    def __init__(self, cache_name: str, session: Session, serializer: Serializer):
+    def __init__(self, cache_name: str, session: Session, serializer: Serializer, cache_options: Optional[CacheOptions] = None) -> None:
         self._cache_name: str = cache_name
         self._serializer: Serializer = serializer
         self._client_stub: NamedCacheServiceStub = NamedCacheServiceStub(session.channel)
@@ -618,6 +640,7 @@
         self._destroyed: bool = False
         self._released: bool = False
         self._session: Session = session
+        self._default_expiry: int = cache_options.default_expiry if cache_options is not None else 0
 
         self._setup_event_handlers()
 
@@ -629,6 +652,10 @@
     def name(self) -> str:
         return self._cache_name
 
+    @property
+    def session(self) -> Session:
+        return self._session
+
     @property
     def destroyed(self) -> bool:
         return self._destroyed
@@ -666,14 +693,14 @@
         return _Stream(self._request_factory.serializer, stream, _entry_producer)
 
     @_pre_call_cache
-    async def put(self, key: K, value: V, ttl: int = 0) -> Optional[V]:
-        p = self._request_factory.put_request(key, value, ttl)
+    async def put(self, key: K, value: V, ttl: Optional[int] = None) -> Optional[V]:
+        p = self._request_factory.put_request(key, value, ttl if ttl is not None else self._default_expiry)
         v = await self._client_stub.put(p)
         return self._request_factory.serializer.deserialize(v.value)
 
     @_pre_call_cache
-    async def put_if_absent(self, key: K, value: V, ttl: int = 0) -> Optional[V]:
-        p = self._request_factory.put_if_absent_request(key, value, ttl)
+    async def put_if_absent(self, key: K, value: V, ttl: Optional[int] = None) -> Optional[V]:
+        p = self._request_factory.put_if_absent_request(key, value, ttl if ttl is not None else self._default_expiry)
         v = await self._client_stub.putIfAbsent(p)
         return self._request_factory.serializer.deserialize(v.value)
 
@@ -907,7 +934,7 @@
 
 class NamedCacheClientV1(NamedCache[K, V]):
 
-    def __init__(self, cache_name: str, session: Session, serializer: Serializer):
+    def __init__(self, cache_name: str, session: Session, serializer: Serializer, cache_options: Optional[CacheOptions] = None):
         self._cache_name: str = cache_name
         self._cache_id: int = 0
         self._serializer: Serializer = serializer
@@ -919,6 +946,7 @@
         self._destroyed: bool = False
         self._released: bool = False
         self._session: Session = session
+        self._default_expiry: int = cache_options.default_expiry if cache_options is not None else 0
 
         self._events_manager: _MapEventsManagerV1[K, V] = _MapEventsManagerV1(
             self, session, serializer, self._internal_emitter, self._request_factory
@@ -971,6 +999,10 @@
     def name(self) -> str:
         return self._cache_name
 
+    @property
+    def session(self) -> Session:
+        return self._session
+
     def on(self, event: MapLifecycleEvent, callback: Callable[[str], None]) -> None:
         self._emitter.on(str(event.value), callback)
 
@@ -996,14 +1028,14 @@
         return dispatcher.result()
 
     @_pre_call_cache
-    async def put(self, key: K, value: V, ttl: int = 0) -> Optional[V]:
-        dispatcher: UnaryDispatcher[Optional[V]] = self._request_factory.put_request(key, value, ttl)
+    async def put(self, key: K, value: V, ttl: Optional[int] = None) -> Optional[V]:
+        dispatcher: UnaryDispatcher[Optional[V]] = self._request_factory.put_request(key, value, ttl if ttl is not None else self._default_expiry)
         await dispatcher.dispatch(self._stream_handler)
         return dispatcher.result()
 
     @_pre_call_cache
-    async def put_if_absent(self, key: K, value: V, ttl: int = 0) -> Optional[V]:
-        dispatcher: UnaryDispatcher[Optional[V]] = self._request_factory.put_if_absent_request(key, value, ttl)
+    async def put_if_absent(self, key: K, value: V, ttl: Optional[int] = None) -> Optional[V]:
+        dispatcher: UnaryDispatcher[Optional[V]] = self._request_factory.put_if_absent_request(key, value, ttl if ttl is not None else self._default_expiry)
         await dispatcher.dispatch(self._stream_handler)
         return dispatcher.result()
 
@@ -1592,9 +1624,6 @@
 
     """
 
-    DEFAULT_FORMAT: Final[str] = "json"
-    """The default serialization format"""
-
     def __init__(self, session_options: Optional[Options] = None):
         """
         Construct a new `Session` based on the provided :func:`coherence.client.Options`
@@ -1769,22 +1798,22 @@
 
     # noinspection PyProtectedMember
     @_pre_call_session
-    async def get_cache(self, name: str, ser_format: str = DEFAULT_FORMAT) -> NamedCache[K, V]:
+    async def get_cache(self, name: str, cache_options: Optional[CacheOptions] = None) -> NamedCache[K, V]:
         """
         Returns a :func:`coherence.client.NamedCache` for the specified cache name.
 
         :param name: the cache name
-        :param ser_format: the serialization format for keys and values stored within the cache
+        :param cache_options: a :class:`coherence.client.CacheOptions`
 
         :return: Returns a :func:`coherence.client.NamedCache` for the specified cache name.
         """
-        serializer = SerializerRegistry.serializer(ser_format)
+        serializer = SerializerRegistry.serializer(self._session_options.format)
 
         if self._protocol_version == 0:
             with self._lock:
                 c = self._caches.get(name)
                 if c is None:
-                    c = NamedCacheClient(name, self, serializer)
+                    c = NamedCacheClient(name, self, serializer, cache_options)
                     # initialize the event stream now to ensure lifecycle listeners will work as expected
                     await c._events_manager._ensure_stream()
                     self._setup_event_handlers(c)
@@ -1794,7 +1823,7 @@
             with self._lock:
                 c = self._caches.get(name)
                 if c is None:
-                    c = NamedCacheClientV1(name, self, serializer)
+                    c = NamedCacheClientV1(name, self, serializer, cache_options)
                     await c._ensure_cache()
                     self._setup_event_handlers(c)
                     self._caches.update({name: c})
@@ -1802,16 +1831,16 @@
 
     # noinspection PyProtectedMember
     @_pre_call_session
-    async def get_map(self, name: str, ser_format: str = DEFAULT_FORMAT) -> NamedMap[K, V]:
+    async def get_map(self, name: str, cache_options: Optional[CacheOptions] = None) -> NamedMap[K, V]:
         """
         Returns a :func:`coherence.client.NameMap` for the specified cache name.
 
         :param name: the map name
-        :param ser_format: the serialization format for keys and values stored within the cache
+        :param cache_options: a :class:`coherence.client.CacheOptions`
 
         :return: Returns a :func:`coherence.client.NamedMap` for the specified cache name.
         """
-        return cast(NamedMap[K, V], await self.get_cache(name, ser_format))
+        return cast(NamedMap[K, V], await self.get_cache(name, cache_options))
 
     def is_ready(self) -> bool:
         """
Index: tests/e2e/test_client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n# Licensed under the Universal Permissive License v 1.0 as shown at\n# https://oss.oracle.com/licenses/upl.\nfrom asyncio import Event\nfrom time import sleep, time\nfrom typing import Dict, Final, List, Optional, Set, TypeVar, Union\n\nimport pytest\n\nimport tests\nfrom coherence import Aggregators, Filters, MapEntry, NamedCache, Session, request_timeout\nfrom coherence.error import RequestTimeoutError\nfrom coherence.event import MapLifecycleEvent\nfrom coherence.extractor import ChainedExtractor, Extractors, UniversalExtractor\nfrom coherence.processor import ExtractorProcessor\nfrom tests.address import Address\nfrom tests.person import Person\n\nK = TypeVar(\"K\")\nV = TypeVar(\"V\")\nR = TypeVar(\"R\")\n\n\nasync def _insert_large_number_of_entries(cache: NamedCache[str, str]) -> int:\n    # insert enough data into the cache to ensure results will be paged\n    # by the proxy.\n    num_bulk_ops: int = 10\n    num_entries: int = 40000\n    bulk_ops: int = int(num_entries / num_bulk_ops)\n    to_send: Dict[str, str] = {}\n    for i in range(num_bulk_ops):\n        offset: int = i * bulk_ops\n        for n in range(bulk_ops):\n            to_insert: str = str(offset + n)\n            to_send[to_insert] = to_insert\n\n        await cache.put_all(to_send)\n\n    return num_entries\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_get_and_put(cache: NamedCache[str, Union[str, int, Person]]) -> None:\n    k: str = \"one\"\n    v: str = \"only-one\"\n    # c.put(k, v, 60000)\n    await cache.put(k, v)\n    r = await cache.get(k)\n    assert r == v\n\n    k1: str = \"two\"\n    v1: int = 2\n    await cache.put(k1, v1)\n    r = await cache.get(k1)\n    assert r == v1\n\n    k2: str = Person.andy().name\n    v2: Person = Person.andy()\n    await cache.put(k2, v2)\n    r = await cache.get(k2)\n    assert isinstance(r, Person)\n    assert r.name == k2\n    assert r.address.city == Person.andy().address.city\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_put_with_ttl(cache: NamedCache[str, Union[str, int]]) -> None:\n    k: str = \"one\"\n    v: str = \"only-one\"\n    await cache.put(k, v, 5000)  # TTL of 5 seconds\n    r = await cache.get(k)\n    assert r == v\n\n    sleep(5)  # sleep for 5 seconds\n    r = await cache.get(k)\n    assert r is None\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_put_if_absent(cache: NamedCache[str, str]) -> None:\n    k: str = \"one\"\n    v: str = \"only-one\"\n    await cache.put(k, v)\n    k1: str = \"two\"\n    v1: str = \"only-two\"\n    r = await cache.put_if_absent(k1, v1)\n    assert r is None\n\n    r = await cache.put_if_absent(k, v)\n    assert r == v\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_keys_filtered(cache: NamedCache[str, str]) -> None:\n    k: str = \"one\"\n    v: str = \"only-one\"\n    await cache.put(k, v)\n    k1: str = \"two\"\n    v1: str = \"only-two\"\n    await cache.put(k1, v1)\n    k2: str = \"three\"\n    v2: str = \"only-three\"\n    await cache.put(k2, v2)\n\n    local_set: Set[str] = set()\n    async for e in await cache.keys(Filters.equals(\"length()\", 8)):\n        local_set.add(e)\n\n    assert len(local_set) == 2\n    assert \"one\" in local_set\n    assert \"two\" in local_set\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_keys_paged(cache: NamedCache[str, str]) -> None:\n    # insert enough data into the cache to ensure results will be paged\n    # by the proxy.\n    num_entries: int = await _insert_large_number_of_entries(cache)\n\n    # Stream the keys and locally cache the results\n    local_set: Set[str] = set()\n    async for e in await cache.keys(by_page=True):\n        local_set.add(e)\n\n    assert len(local_set) == num_entries\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_entries_filtered(cache: NamedCache[str, str]) -> None:\n    k: str = \"one\"\n    v: str = \"only-one\"\n    await cache.put(k, v)\n    k1: str = \"two\"\n    v1: str = \"only-two\"\n    await cache.put(k1, v1)\n    k2: str = \"three\"\n    v2: str = \"only-three\"\n    await cache.put(k2, v2)\n\n    local_dict: Dict[str, str] = {}\n    async for e in await cache.entries(Filters.equals(\"length()\", 8)):\n        local_dict[e.key] = e.value\n\n    assert len(local_dict) == 2\n    assert local_dict[\"one\"] == \"only-one\"\n    assert local_dict[\"two\"] == \"only-two\"\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_entries_paged(cache: NamedCache[str, str]) -> None:\n    # insert enough data into the cache to ensure results will be paged\n    # by the proxy.\n    num_entries = await _insert_large_number_of_entries(cache)\n\n    assert await cache.size() == num_entries\n\n    # Stream the keys and locally cache the results\n    local_dict: Dict[str, str] = {}\n    async for e in await cache.entries(by_page=True):\n        local_dict[e.key] = e.value\n\n    assert len(local_dict) == num_entries\n\n\n@pytest.mark.asyncio\nasync def test_values_filtered(cache: NamedCache[str, str]) -> None:\n    k: str = \"one\"\n    v: str = \"only-one\"\n    await cache.put(k, v)\n    k1: str = \"two\"\n    v1: str = \"only-two\"\n    await cache.put(k1, v1)\n    k2: str = \"three\"\n    v2: str = \"only-three\"\n    await cache.put(k2, v2)\n\n    local_list: List[str] = []\n    async for e in await cache.values(Filters.equals(\"length()\", 8)):\n        local_list.append(e)\n\n    assert len(local_list) == 2\n    assert \"only-one\" in local_list\n    assert \"only-two\" in local_list\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_values_paged(cache: NamedCache[str, str]) -> None:\n    # insert enough data into the cache to ensure results will be paged\n    # by the proxy.\n    num_entries: int = await _insert_large_number_of_entries(cache)\n\n    # Stream the keys and locally cache the results\n    local_list: List[str] = []\n    async for e in await cache.values(by_page=True):\n        local_list.append(e)\n\n    assert len(local_list) == num_entries\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_put_all(cache: NamedCache[str, str]) -> None:\n    k1: str = \"three\"\n    v1: str = \"only-three\"\n    k2: str = \"four\"\n    v2: str = \"only-four\"\n    my_map: Dict[str, str] = {k1: v1, k2: v2}\n    await cache.put_all(my_map)\n    r1 = await cache.get(k1)\n    r2 = await cache.get(k2)\n    assert r1 == v1\n    assert r2 == v2\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_get_or_default(cache: NamedCache[str, str]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n    k: str = \"five\"\n    default_v: str = \"five-only\"\n    r: Optional[str] = await cache.get_or_default(k1, default_v)\n    assert r == v1\n    r2: Optional[str] = await cache.get_or_default(k, default_v)\n    assert r2 == default_v\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_get_all(cache: NamedCache[str, str]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n\n    k2: str = \"two\"\n    v2: str = \"only-two\"\n    await cache.put(k2, v2)\n\n    k3: str = \"three\"\n    v3: str = \"only-three\"\n    await cache.put(k3, v3)\n\n    r: Dict[str, str] = {}\n    # result = await cache.get_all({k1, k3})\n    async for e in await cache.get_all({k1, k3}):\n        r[e.key] = e.value\n\n    assert r == {k1: v1, k3: v3}\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_get_all_no_keys_raises_error(cache: NamedCache[str, str]) -> None:\n    with pytest.raises(ValueError):\n        # noinspection PyTypeChecker\n        await cache.get_all(None)\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_remove(cache: NamedCache[str, str]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n\n    r: str = await cache.remove(k1)\n    assert r == v1\n\n    r = await cache.remove(\"some-key\")\n    assert r is None\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_remove_mapping(cache: NamedCache[str, str]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n\n    r: bool = await cache.remove_mapping(k1, v1)\n    assert r is True\n\n    r = await cache.remove_mapping(\"some-key\", \"some-value\")\n    assert r is False\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_replace(cache: NamedCache[str, str]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n\n    v2: str = \"only-one-one\"\n    r: str = await cache.replace(k1, v2)\n    assert r == v1\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_replace_mapping(cache: NamedCache[str, str]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n\n    v2: str = \"only-one-one\"\n    r: bool = await cache.replace_mapping(k1, v1, v2)\n    assert r is True\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_contains_key(cache: NamedCache[str, str]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n\n    r: bool = await cache.contains_key(k1)\n    assert r is True\n\n    r = await cache.contains_key(\"two\")\n    assert r is False\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_contains_value(cache: NamedCache[str, str]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n\n    r: bool = await cache.contains_value(v1)\n    assert r is True\n\n    r = await cache.contains_key(\"two-only\")\n    assert r is False\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_is_empty(cache: NamedCache[str, str]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n\n    r: bool = await cache.is_empty()\n    assert r is False\n\n    await cache.clear()\n    r = await cache.is_empty()\n    assert r is True\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_size(cache: NamedCache[str, str]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n    r: int = await cache.size()\n    assert r == 1\n\n    k2: str = \"two\"\n    v2: str = \"only-two\"\n    await cache.put(k2, v2)\n    r = await cache.size()\n    assert r == 2\n\n    await cache.clear()\n    r = await cache.size()\n    assert r == 0\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_invoke(cache: NamedCache[str, Union[str, Person]]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n    k2: str = \"two\"\n    v2: str = \"only-two\"\n    await cache.put(k2, v2)\n\n    r: int = await cache.invoke(k2, ExtractorProcessor(UniversalExtractor(\"length()\")))\n    assert r == len(v2)\n\n    r2: bool = await cache.invoke(k2, ExtractorProcessor(UniversalExtractor(\"isEmpty()\")))\n    assert r2 is False\n\n    r3: str = await cache.invoke(k2, ExtractorProcessor(UniversalExtractor(\"toUpperCase()\")))\n    assert r3 == v2.upper()\n\n    k3: str = Person.andy().name\n    v3: Person = Person.andy()\n    await cache.put(k3, v3)\n    r4: str = await cache.invoke(k3, ExtractorProcessor(UniversalExtractor(\"name\")))\n    assert r4 == k3\n    r5: Address = await cache.invoke(k3, ExtractorProcessor(UniversalExtractor(\"address\")))\n    assert isinstance(r5, Address)\n    assert r5.zipcode == v3.address.zipcode\n    r6: int = await cache.invoke(k3, ExtractorProcessor(ChainedExtractor(\"address.zipcode\")))\n    assert r6 == v3.address.zipcode\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio\nasync def test_invoke_all_keys(cache: NamedCache[str, str]) -> None:\n    k1: str = \"one\"\n    v1: str = \"only-one\"\n    await cache.put(k1, v1)\n\n    k2: str = \"two\"\n    v2: str = \"only-two\"\n    await cache.put(k2, v2)\n\n    k3: str = \"three\"\n    v3: str = \"only-three\"\n    await cache.put(k3, v3)\n\n    r: Dict[str, int] = {}\n    e: MapEntry[str, int]\n    async for e in await cache.invoke_all(ExtractorProcessor(UniversalExtractor(\"length()\")), keys={k1, k3}):\n        r[e.key] = e.value\n\n    assert r == {k1: 8, k3: 10}\n\n\nEVENT_TIMEOUT: Final[float] = 20.0\n\n\n# noinspection PyShadowingNames\n@pytest.mark.asyncio(loop_scope=\"function\")\nasync def test_cache_truncate_event(cache: NamedCache[str, str]) -> None:\n    name: str = \"UNSET\"\n    event: Event = Event()\n\n    def callback(n: str) -> None:\n        nonlocal name\n        name = n\n        event.set()\n\n    cache.on(MapLifecycleEvent.TRUNCATED, callback)\n\n    await cache.put(\"A\", \"B\")\n    await cache.put(\"C\", \"D\")\n    assert await cache.size() == 2\n\n    await cache.truncate()\n    await tests.wait_for(event, EVENT_TIMEOUT)\n\n    assert name == cache.name\n    assert await cache.size() == 0\n\n\n# noinspection PyShadowingNames,DuplicatedCode\n@pytest.mark.asyncio(loop_scope=\"function\")\nasync def test_cache_release_event() -> None:\n    session: Session = await tests.get_session()\n    cache: NamedCache[str, str] = await session.get_cache(\"test-\" + str(int(time() * 1000)))\n    name: str = \"UNSET\"\n    event: Event = Event()\n\n    def callback(n: str) -> None:\n        nonlocal name\n        name = n\n        event.set()\n\n    cache.on(MapLifecycleEvent.RELEASED, callback)\n\n    try:\n        await cache.put(\"A\", \"B\")\n        await cache.put(\"C\", \"D\")\n        assert await cache.size() == 2\n\n        await cache.release()\n        await tests.wait_for(event, EVENT_TIMEOUT)\n\n        assert name == cache.name\n        assert cache.released\n        assert not cache.destroyed\n        assert not cache.active\n    finally:\n        await session.close()\n\n\n# noinspection PyShadowingNames,DuplicatedCode,PyUnresolvedReferences\n@pytest.mark.asyncio\nasync def test_add_remove_index(person_cache: NamedCache[str, Person]) -> None:\n    await person_cache.add_index(Extractors.extract(\"age\"))\n    result = await person_cache.aggregate(Aggregators.record(), None, Filters.greater(\"age\", 25))\n    # print(result)\n    # {'@class': 'util.SimpleQueryRecord', 'results': [{'@class': 'util.SimpleQueryRecord.PartialResult',\n    # 'partitionSet': {'@class': 'net.partition.PartitionSet', 'bits': [2147483647], 'markedCount': -1,\n    # 'partitionCount': 31, 'tailMask': 2147483647}, 'steps': [{'@class': 'util.SimpleQueryRecord.PartialResult.Step',\n    # 'efficiency': 5, 'filter': 'GreaterFilter(.age, 25)',\n    # 'indexLookupRecords': [{'@class': 'util.SimpleQueryRecord.PartialResult.IndexLookupRecord',\n    # 'bytes': 6839, 'distinctValues': 5, 'extractor': '.age', 'index': 'Partitioned: Footprint=6.67KB, Size=5',\n    # 'indexDesc': 'Partitioned: ', 'ordered': False}], 'keySetSizePost': 0, 'keySetSizePre': 7, 'millis': 0,\n    # 'subSteps': []}]}], 'type': {'@class': 'aggregator.QueryRecorder.RecordType', 'enum': 'EXPLAIN'}}\n\n    idx_rec = result[\"results\"][0].get(\"steps\")[0].get(\"indexLookupRecords\")[0]\n    # print(idx_rec)\n    # {'@class': 'util.SimpleQueryRecord.PartialResult.IndexLookupRecord', 'bytes': 6839, 'distinctValues': 5,\n    # 'extractor': '.age', 'index': 'Partitioned: Footprint=6.67KB, Size=5', 'indexDesc': 'Partitioned: ',\n    # 'ordered': False}\n    assert \"index\" in idx_rec\n\n    await person_cache.remove_index(Extractors.extract(\"age\"))\n    result2 = await person_cache.aggregate(Aggregators.record(), None, Filters.greater(\"age\", 25))\n    print(result2)\n    # {'@class': 'util.SimpleQueryRecord', 'results': [{'@class': 'util.SimpleQueryRecord.PartialResult',\n    # 'partitionSet': {'@class': 'net.partition.PartitionSet', 'bits': [2147483647], 'markedCount': -1,\n    # 'partitionCount': 31, 'tailMask': 2147483647}, 'steps': [{'@class': 'util.SimpleQueryRecord.PartialResult.Step',\n    # 'efficiency': 7000, 'filter': 'GreaterFilter(.age, 25)',\n    # 'indexLookupRecords': [{'@class': 'util.SimpleQueryRecord.PartialResult.IndexLookupRecord', 'bytes': -1,\n    # 'distinctValues': -1, 'extractor': '.age', 'ordered': False}], 'keySetSizePost': 0, 'keySetSizePre': 7,\n    # 'millis': 0, 'subSteps': []}]}], 'type': {'@class': 'aggregator.QueryRecorder.RecordType', 'enum': 'EXPLAIN'}}\n    idx_rec = result2[\"results\"][0].get(\"steps\")[0].get(\"indexLookupRecords\")[0]\n    # print(idx_rec)\n    # {'@class': 'util.SimpleQueryRecord.PartialResult.IndexLookupRecord', 'bytes': -1, 'distinctValues': -1,\n    # 'extractor': '.age', 'ordered': False}\n    assert \"index\" not in idx_rec\n\n\n@pytest.mark.asyncio\nasync def test_stream_request_timeout(cache: NamedCache[str, str]) -> None:\n    # insert enough data into the cache to ensure results will be paged\n    # by the proxy.\n    await _insert_large_number_of_entries(cache)\n\n    start = time()\n    try:\n        async with request_timeout(seconds=2.0):\n            async for e in await cache.values():\n                continue\n            assert False\n    except RequestTimeoutError:\n        end = time()\n        assert pytest.approx((end - start), 0.5) == 2.0\n\n\n@pytest.mark.asyncio\nasync def test_paged_stream_request_timeout(cache: NamedCache[str, str]) -> None:\n    # insert enough data into the cache to ensure results will be paged\n    # by the proxy.\n    await _insert_large_number_of_entries(cache)\n\n    start = time()\n    try:\n        async with request_timeout(seconds=2.0):\n            async for e in await cache.values(by_page=True):\n                continue\n            assert False\n    except RequestTimeoutError:\n        end = time()\n        assert pytest.approx((end - start), 0.5) == 2.0\n\n\n@pytest.mark.skip(\n    reason=\"Teardown fails due to proxy-side issue blocking subsequent \\\n    timed out calls due to previous call still running\"\n)\n@pytest.mark.asyncio\nasync def test_unary_request_timeout(cache: NamedCache[str, str]) -> None:\n    start = time()\n    try:\n        async with request_timeout(seconds=5.0):\n            await cache.invoke(\"key\", tests.LongRunningProcessor())\n            assert False\n    except RequestTimeoutError:\n        end = time()\n        assert pytest.approx((end - start), 0.5) == 5.0\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/e2e/test_client.py b/tests/e2e/test_client.py
--- a/tests/e2e/test_client.py	(revision edac2b13153f50cbb399aec89f0dfb0b6a30305b)
+++ b/tests/e2e/test_client.py	(date 1730241693990)
@@ -8,6 +8,7 @@
 import pytest
 
 import tests
+from coherence.client import CacheOptions
 from coherence import Aggregators, Filters, MapEntry, NamedCache, Session, request_timeout
 from coherence.error import RequestTimeoutError
 from coherence.event import MapLifecycleEvent
@@ -579,3 +580,47 @@
     except RequestTimeoutError:
         end = time()
         assert pytest.approx((end - start), 0.5) == 5.0
+
+
+# noinspection PyUnresolvedReferences
+@pytest.mark.asyncio
+async def test_ttl_configuration(test_session) -> None:
+    cache: NamedCache[str, str] = await test_session.get_cache("none")
+    assert cache._default_expiry == 0
+    await cache.destroy()
+
+    options: CacheOptions = CacheOptions()
+    cache = await test_session.get_cache("default", options)
+    assert cache._default_expiry == options.default_expiry
+    await cache.destroy()
+
+    options: CacheOptions = CacheOptions(default_expiry=2000)
+    cache = await test_session.get_cache("defined", options)
+    assert cache._default_expiry == options.default_expiry
+
+    await cache.put("a", "b")
+    assert await cache.size() == 1
+
+    sleep(2.5)
+    assert await cache.size() == 0
+    await cache.destroy()
+
+    options: CacheOptions = CacheOptions(default_expiry=2000)
+    cache = await test_session.get_cache("override", options)
+
+    await cache.put("a", "b", 5000)
+
+    assert await cache.size() == 1
+
+    sleep(2.5)
+    assert await cache.size() == 1
+
+    sleep(1)
+    assert await cache.size() == 1
+
+    sleep(3)
+    assert await cache.size() == 0
+    await cache.destroy()
+
+
+
