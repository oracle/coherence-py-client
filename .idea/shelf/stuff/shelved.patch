Index: src/coherence/util_v1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Copyright (c) 2022, 2023 Oracle and/or its affiliates.\n# Licensed under the Universal Permissive License v 1.0 as shown at\n# https://oss.oracle.com/licenses/upl.\n\nfrom __future__ import annotations\n\nimport logging\nimport sys\nimport threading\nfrom typing import Optional, TypeVar\n\nfrom google.protobuf.any_pb2 import Any  # type: ignore\nfrom google.protobuf.wrappers_pb2 import BytesValue  # type: ignore\n\nfrom . import cache_service_messages_v1_pb2, common_messages_v1_pb2, proxy_service_messages_v1_pb2\nfrom .aggregator import EntryAggregator\nfrom .comparator import Comparator\nfrom .extractor import ValueExtractor\nfrom .filter import Filter, Filters, MapEventFilter\nfrom .messages_pb2 import (\n    EntrySetRequest,\n    KeySetRequest,\n    MapListenerRequest,\n    PageRequest,\n    PutIfAbsentRequest,\n    ValuesRequest,\n)\nfrom .processor import EntryProcessor\nfrom .serialization import Serializer\n\nE = TypeVar(\"E\")\nK = TypeVar(\"K\")\nR = TypeVar(\"R\")\nT = TypeVar(\"T\")\nV = TypeVar(\"V\")\n\nCOH_LOG = logging.getLogger(\"coherence\")\n\n\nclass Request_ID_Generator:\n    _generator = None\n\n    def __init__(self) -> None:\n        self._lock = threading.Lock()\n        self._counter = 0\n\n    @classmethod\n    def generator(cls) -> Request_ID_Generator:\n        if Request_ID_Generator._generator is None:\n            Request_ID_Generator._generator = Request_ID_Generator()\n        return Request_ID_Generator._generator\n\n    @classmethod\n    def get_next_id(cls) -> int:\n        generator = cls.generator()\n        with generator._lock:\n            if generator._counter == sys.maxsize:\n                generator._counter = 0\n            else:\n                generator._counter += 1\n            return generator._counter\n\n\nclass RequestFactory_v1:\n\n    def __init__(self, cache_name: str, cache_id: int, scope: str, serializer: Serializer) -> None:\n        self._cache_name: str = cache_name\n        self._cache_id: int = cache_id\n        self._scope: str = scope\n        self._serializer: Serializer = serializer\n        # self.__uidPrefix: str = \"-\" + cache_name + \"-\" + str(time.time_ns())\n        # self.__next_request_id: int = 0\n        # self.__next_filter_id: int = 0\n\n    @property\n    def cache_id(self) -> int:\n        return self._cache_id\n\n    @cache_id.setter\n    def cache_id(self, value: int) -> None:\n        self._cache_id = value\n\n    def get_serializer(self) -> Serializer:\n        return self._serializer\n\n    def create_proxy_request(\n        self, named_cache_request: cache_service_messages_v1_pb2.NamedCacheRequest\n    ) -> proxy_service_messages_v1_pb2.ProxyRequest:\n        any_named_cache_request = Any()\n        any_named_cache_request.Pack(named_cache_request)\n        req_id = Request_ID_Generator.get_next_id()\n        proxy_request = proxy_service_messages_v1_pb2.ProxyRequest(\n            id=req_id,\n            message=any_named_cache_request,\n        )\n        return proxy_request\n\n    def ensure_request(self, cache_name: str) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = cache_service_messages_v1_pb2.EnsureCacheRequest(cache=cache_name)\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.EnsureCache,\n            message=any_cache_request,\n        )\n        return named_cache_request\n\n    def put_request(self, key: K, value: V, ttl: int = -1) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = cache_service_messages_v1_pb2.PutRequest(\n            key=self._serializer.serialize(key),  # Serialized key\n            value=self._serializer.serialize(value),  # Serialized value\n            ttl=ttl,\n        )\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Put,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def get_request(self, key: K) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = BytesValue(value=self._serializer.serialize(key))\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Get,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def get_all_request(self, keys: set[K]) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        if keys is None:\n            raise ValueError(\"Must specify a set of keys\")\n\n        lst = list()\n        for k in keys:\n            lst.append(self._serializer.serialize(k))\n        cache_request = common_messages_v1_pb2.CollectionOfBytesValues(\n            values=lst,\n        )\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.GetAll,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def put_if_absent_request(self, key: K, value: V, ttl: int = -1) -> PutIfAbsentRequest:\n        cache_request = cache_service_messages_v1_pb2.PutRequest(\n            key=self._serializer.serialize(key),  # Serialized key\n            value=self._serializer.serialize(value),  # Serialized value\n            ttl=ttl,\n        )\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.PutIfAbsent,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def put_all_request(\n        self, map: dict[K, V], ttl: Optional[int] = 0\n    ) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        entry_list = list()\n        for key, value in map.items():\n            k = self._serializer.serialize(key)\n            v = self._serializer.serialize(value)\n            e = common_messages_v1_pb2.BinaryKeyAndValue(key=k, value=v)\n            entry_list.append(e)\n        cache_request = cache_service_messages_v1_pb2.PutAllRequest(\n            entries=entry_list,\n            ttl=ttl,\n        )\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.PutAll,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def clear_request(self) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Clear,\n            cacheId=self.cache_id,\n        )\n        return named_cache_request\n\n    def destroy_request(self) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Destroy,\n            cacheId=self.cache_id,\n        )\n        return named_cache_request\n\n    def truncate_request(self) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Truncate,\n            cacheId=self.cache_id,\n        )\n        return named_cache_request\n\n    def remove_request(self, key: K) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = BytesValue(value=self._serializer.serialize(key))\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Remove,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def remove_mapping_request(self, key: K, value: V) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = common_messages_v1_pb2.BinaryKeyAndValue(\n            key=self._serializer.serialize(key), value=self._serializer.serialize(value)\n        )\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.RemoveMapping,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def replace_request(self, key: K, value: V) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = common_messages_v1_pb2.BinaryKeyAndValue(\n            key=self._serializer.serialize(key), value=self._serializer.serialize(value)\n        )\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Replace,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def replace_mapping_request(\n        self, key: K, old_value: V, new_value: V\n    ) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = cache_service_messages_v1_pb2.ReplaceMappingRequest(\n            key=self._serializer.serialize(key),\n            previousValue=self._serializer.serialize(old_value),\n            newValue=self._serializer.serialize(new_value),\n        )\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.ReplaceMapping,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def contains_key_request(self, key: K) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = BytesValue(value=self._serializer.serialize(key))\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.ContainsKey,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def contains_value_request(self, value: V) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = BytesValue(value=self._serializer.serialize(value))\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.ContainsValue,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def is_empty_request(self) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.IsEmpty,\n            cacheId=self.cache_id,\n        )\n        return named_cache_request\n\n    def size_request(self) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Size,\n            cacheId=self.cache_id,\n        )\n        return named_cache_request\n\n    def invoke_request(self, key: K, processor: EntryProcessor[R]) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = cache_service_messages_v1_pb2.ExecuteRequest(\n            agent=self._serializer.serialize(processor),\n            keys=cache_service_messages_v1_pb2.KeysOrFilter(\n                key=self._serializer.serialize(key),\n            ),\n        )\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Invoke,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def invoke_all_request(\n        self, processor: EntryProcessor[R], keys: Optional[set[K]] = None, filter: Optional[Filter] = None\n    ) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        if keys is not None and filter is not None:\n            raise ValueError(\"keys and filter are mutually exclusive\")\n\n        if keys is not None:\n            list_of_keys = list()\n            for key in keys:\n                list_of_keys.append(self._serializer.serialize(key))\n            cache_request = cache_service_messages_v1_pb2.ExecuteRequest(\n                agent=self._serializer.serialize(processor),\n                keys=cache_service_messages_v1_pb2.KeysOrFilter(\n                    keys=common_messages_v1_pb2.CollectionOfBytesValues(\n                        values=list_of_keys,\n                    ),\n                ),\n            )\n        elif filter is not None:\n            cache_request = cache_service_messages_v1_pb2.ExecuteRequest(\n                agent=self._serializer.serialize(processor),\n                keys=cache_service_messages_v1_pb2.KeysOrFilter(\n                    filter=self._serializer.serialize(filter),\n                ),\n            )\n        else:\n            cache_request = cache_service_messages_v1_pb2.ExecuteRequest(\n                agent=self._serializer.serialize(processor),\n            )\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Invoke,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def aggregate_request(\n        self, aggregator: EntryAggregator[R], keys: Optional[set[K]] = None, filter: Optional[Filter] = None\n    ) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        if keys is not None and filter is not None:\n            raise ValueError(\"keys and filter are mutually exclusive\")\n\n        if keys is not None:\n            list_of_keys = list()\n            for key in keys:\n                list_of_keys.append(self._serializer.serialize(key))\n            cache_request = cache_service_messages_v1_pb2.ExecuteRequest(\n                agent=self._serializer.serialize(aggregator),\n                keys=cache_service_messages_v1_pb2.KeysOrFilter(\n                    keys=common_messages_v1_pb2.CollectionOfBytesValues(\n                        values=list_of_keys,\n                    ),\n                ),\n            )\n        elif filter is not None:\n            cache_request = cache_service_messages_v1_pb2.ExecuteRequest(\n                agent=self._serializer.serialize(aggregator),\n                keys=cache_service_messages_v1_pb2.KeysOrFilter(\n                    filter=self._serializer.serialize(filter),\n                ),\n            )\n        else:\n            cache_request = cache_service_messages_v1_pb2.ExecuteRequest(\n                agent=self._serializer.serialize(aggregator),\n            )\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Aggregate,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def values_request(self, filter: Optional[Filter] = None, comparator: Optional[Comparator] = None) -> ValuesRequest:\n        if filter is None and comparator is not None:\n            raise ValueError(\"Filter cannot be None\")\n\n        r: ValuesRequest = ValuesRequest(\n            scope=self._scope,\n            cache=self._cache_name,\n            format=self._serializer.format,\n        )\n\n        if filter is not None:\n            r.filter = self._serializer.serialize(filter)\n\n        if comparator is not None:\n            r.comparator = self._serializer.serialize(comparator)\n\n        return r\n\n    def keys_request(self, filter: Optional[Filter] = None) -> KeySetRequest:\n        r: KeySetRequest = KeySetRequest(\n            scope=self._scope,\n            cache=self._cache_name,\n            format=self._serializer.format,\n        )\n\n        if filter is not None:\n            r.filter = self._serializer.serialize(filter)\n\n        return r\n\n    def entries_request(\n        self, filter: Optional[Filter] = None, comparator: Optional[Comparator] = None\n    ) -> EntrySetRequest:\n        if filter is None and comparator is not None:\n            raise ValueError(\"Filter cannot be None\")\n\n        r: EntrySetRequest = EntrySetRequest(\n            scope=self._scope,\n            cache=self._cache_name,\n            format=self._serializer.format,\n        )\n\n        if filter is not None:\n            r.filter = self._serializer.serialize(filter)\n\n        if comparator is not None:\n            r.comparator = self._serializer.serialize(comparator)\n\n        return r\n\n    def page_request(self, cookie: bytes) -> PageRequest:\n        \"\"\"\n        Creates a gRPC PageRequest.\n\n        :param cookie: the cookie used for paging\n        :return: a new PageRequest\n        \"\"\"\n\n        r: PageRequest = PageRequest(\n            scope=self._scope, cache=self._cache_name, format=self._serializer.format, cookie=cookie\n        )\n\n        return r\n\n    def map_listener_request(\n        self, subscribe: bool, lite: bool = False, *, key: Optional[K] = None, filter: Optional[Filter] = None\n    ) -> MapListenerRequest:\n        \"\"\"Creates a gRPC generated MapListenerRequest\"\"\"\n\n        if key is None and filter is None:\n            raise AssertionError(\"Must specify a key or a filter\")\n\n        request: MapListenerRequest = MapListenerRequest(\n            cache=self._cache_name, scope=self._scope, format=self._serializer.format\n        )\n\n        request.lite = lite\n        request.subscribe = subscribe\n        request.uid = self.__generate_next_request_id(\"key\" if key is not None else \"filter\")\n        request.trigger = bytes()\n        request.priming = False\n\n        if key is not None:  # registering a key listener\n            request.type = MapListenerRequest.RequestType.KEY\n            request.key = self._serializer.serialize(key)\n        else:  # registering a Filter listener\n            request.type = MapListenerRequest.RequestType.FILTER\n            self.__next_filter_id += 1\n            request.filterId = self.__next_filter_id\n            filter_local: Filter = filter if filter is not None else Filters.always()\n            if not isinstance(filter_local, MapEventFilter):\n                filter_local = MapEventFilter.from_filter(filter_local)\n\n            request.filter = self._serializer.serialize(filter_local)\n\n        return request\n\n    def map_event_subscribe(self) -> MapListenerRequest:\n        request: MapListenerRequest = MapListenerRequest(\n            cache=self._cache_name, scope=self._scope, format=self._serializer.format\n        )\n        request.uid = self.__generate_next_request_id(\"init\")\n        request.subscribe = True\n        request.type = MapListenerRequest.RequestType.INIT\n\n        return request\n\n    def __generate_next_request_id(self, prefix: str) -> str:\n        \"\"\"Generates a prefix map-specific prefix when starting a MapEvent gRPC stream.\"\"\"\n        self.__next_request_id += 1\n        return prefix + self.__uidPrefix + str(self.__next_request_id)\n\n    def add_index_request(\n        self, extractor: ValueExtractor[T, E], ordered: bool = False, comparator: Optional[Comparator] = None\n    ) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = cache_service_messages_v1_pb2.IndexRequest(\n            add=True,\n            extractor=self._serializer.serialize(extractor),\n            sorted=ordered,\n        )\n        if comparator is not None:\n            cache_request.comparator = self._serializer.serialize(comparator)\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Index,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n\n    def remove_index_request(self, extractor: ValueExtractor[T, E]) -> cache_service_messages_v1_pb2.NamedCacheRequest:\n        cache_request = cache_service_messages_v1_pb2.IndexRequest(\n            add=False,\n            extractor=self._serializer.serialize(extractor),\n        )\n\n        any_cache_request = Any()\n        any_cache_request.Pack(cache_request)\n\n        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(\n            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Index,\n            cacheId=self.cache_id,\n            message=any_cache_request,\n        )\n\n        return named_cache_request\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/coherence/util_v1.py b/src/coherence/util_v1.py
--- a/src/coherence/util_v1.py	(revision 81343133ce6e0dc5bfdeab733bcfd5abcb388185)
+++ b/src/coherence/util_v1.py	(date 1725855441012)
@@ -7,6 +7,7 @@
 import logging
 import sys
 import threading
+from functools import wraps
 from typing import Optional, TypeVar
 
 from google.protobuf.any_pb2 import Any  # type: ignore
@@ -37,6 +38,27 @@
 COH_LOG = logging.getLogger("coherence")
 
 
+def _proxy_request(request_type):  # type: ignore
+    def wrapper(func):  # type: ignore
+        @wraps(func)
+        def inner(self, *args, **kwargs):  # type: ignore
+            req_to_pack = func(self, *args, **kwargs)
+            packed_req = None
+
+            if req_to_pack is not None:
+                packed_req = Any()
+                packed_req.Pack(req_to_pack)
+
+            msg = cache_service_messages_v1_pb2.NamedCacheRequest(
+                type=request_type, cacheId=self.cache_id, message=packed_req)
+
+            return msg
+
+        return inner
+
+    return wrapper
+
+
 class Request_ID_Generator:
     _generator = None
 
@@ -107,37 +129,18 @@
         )
         return named_cache_request
 
-    def put_request(self, key: K, value: V, ttl: int = -1) -> cache_service_messages_v1_pb2.NamedCacheRequest:
-        cache_request = cache_service_messages_v1_pb2.PutRequest(
+    @_proxy_request(cache_service_messages_v1_pb2.NamedCacheRequestType.Put)
+    def put_request(self, key: K, value: V, ttl: int = -1) -> cache_service_messages_v1_pb2.PutRequest:
+        return cache_service_messages_v1_pb2.PutRequest(
             key=self._serializer.serialize(key),  # Serialized key
             value=self._serializer.serialize(value),  # Serialized value
             ttl=ttl,
         )
 
-        any_cache_request = Any()
-        any_cache_request.Pack(cache_request)
-
-        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(
-            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Put,
-            cacheId=self.cache_id,
-            message=any_cache_request,
-        )
+    @_proxy_request(cache_service_messages_v1_pb2.NamedCacheRequestType.Put)
+    def get_request(self, key: K) -> BytesValue:
+        return BytesValue(value=self._serializer.serialize(key))
 
-        return named_cache_request
-
-    def get_request(self, key: K) -> cache_service_messages_v1_pb2.NamedCacheRequest:
-        cache_request = BytesValue(value=self._serializer.serialize(key))
-
-        any_cache_request = Any()
-        any_cache_request.Pack(cache_request)
-
-        named_cache_request = cache_service_messages_v1_pb2.NamedCacheRequest(
-            type=cache_service_messages_v1_pb2.NamedCacheRequestType.Get,
-            cacheId=self.cache_id,
-            message=any_cache_request,
-        )
-
-        return named_cache_request
 
     def get_all_request(self, keys: set[K]) -> cache_service_messages_v1_pb2.NamedCacheRequest:
         if keys is None:
