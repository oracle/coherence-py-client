# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import coherence.proxy_service_messages_v1_pb2 as proxy__service__messages__v1__pb2


class ProxyServiceStub(object):
    """-----------------------------------------------------------------
    The Coherence gRPC Proxy Service definition.
    -----------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.subChannel = channel.stream_stream(
                '/coherence.proxy.v1.ProxyService/subChannel',
                request_serializer=proxy__service__messages__v1__pb2.ProxyRequest.SerializeToString,
                response_deserializer=proxy__service__messages__v1__pb2.ProxyResponse.FromString,
                )


class ProxyServiceServicer(object):
    """-----------------------------------------------------------------
    The Coherence gRPC Proxy Service definition.
    -----------------------------------------------------------------

    """

    def subChannel(self, request_iterator, context):
        """Sets up a bidirectional channel for cache requests and responses.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProxyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'subChannel': grpc.stream_stream_rpc_method_handler(
                    servicer.subChannel,
                    request_deserializer=proxy__service__messages__v1__pb2.ProxyRequest.FromString,
                    response_serializer=proxy__service__messages__v1__pb2.ProxyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coherence.proxy.v1.ProxyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProxyService(object):
    """-----------------------------------------------------------------
    The Coherence gRPC Proxy Service definition.
    -----------------------------------------------------------------

    """

    @staticmethod
    def subChannel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/coherence.proxy.v1.ProxyService/subChannel',
            proxy__service__messages__v1__pb2.ProxyRequest.SerializeToString,
            proxy__service__messages__v1__pb2.ProxyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
