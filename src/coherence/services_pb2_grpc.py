# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2
import coherence.messages_pb2 as messages__pb2


class NamedCacheServiceStub(object):
    """A gRPC NamedCache service.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addIndex = channel.unary_unary(
                '/coherence.NamedCacheService/addIndex',
                request_serializer=messages__pb2.AddIndexRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.aggregate = channel.unary_unary(
                '/coherence.NamedCacheService/aggregate',
                request_serializer=messages__pb2.AggregateRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
                )
        self.clear = channel.unary_unary(
                '/coherence.NamedCacheService/clear',
                request_serializer=messages__pb2.ClearRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.containsEntry = channel.unary_unary(
                '/coherence.NamedCacheService/containsEntry',
                request_serializer=messages__pb2.ContainsEntryRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
                )
        self.containsKey = channel.unary_unary(
                '/coherence.NamedCacheService/containsKey',
                request_serializer=messages__pb2.ContainsKeyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
                )
        self.containsValue = channel.unary_unary(
                '/coherence.NamedCacheService/containsValue',
                request_serializer=messages__pb2.ContainsValueRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
                )
        self.destroy = channel.unary_unary(
                '/coherence.NamedCacheService/destroy',
                request_serializer=messages__pb2.DestroyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.entrySet = channel.unary_stream(
                '/coherence.NamedCacheService/entrySet',
                request_serializer=messages__pb2.EntrySetRequest.SerializeToString,
                response_deserializer=messages__pb2.Entry.FromString,
                )
        self.events = channel.stream_stream(
                '/coherence.NamedCacheService/events',
                request_serializer=messages__pb2.MapListenerRequest.SerializeToString,
                response_deserializer=messages__pb2.MapListenerResponse.FromString,
                )
        self.get = channel.unary_unary(
                '/coherence.NamedCacheService/get',
                request_serializer=messages__pb2.GetRequest.SerializeToString,
                response_deserializer=messages__pb2.OptionalValue.FromString,
                )
        self.getAll = channel.unary_stream(
                '/coherence.NamedCacheService/getAll',
                request_serializer=messages__pb2.GetAllRequest.SerializeToString,
                response_deserializer=messages__pb2.Entry.FromString,
                )
        self.invoke = channel.unary_unary(
                '/coherence.NamedCacheService/invoke',
                request_serializer=messages__pb2.InvokeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
                )
        self.invokeAll = channel.unary_stream(
                '/coherence.NamedCacheService/invokeAll',
                request_serializer=messages__pb2.InvokeAllRequest.SerializeToString,
                response_deserializer=messages__pb2.Entry.FromString,
                )
        self.isEmpty = channel.unary_unary(
                '/coherence.NamedCacheService/isEmpty',
                request_serializer=messages__pb2.IsEmptyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
                )
        self.keySet = channel.unary_stream(
                '/coherence.NamedCacheService/keySet',
                request_serializer=messages__pb2.KeySetRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
                )
        self.nextEntrySetPage = channel.unary_stream(
                '/coherence.NamedCacheService/nextEntrySetPage',
                request_serializer=messages__pb2.PageRequest.SerializeToString,
                response_deserializer=messages__pb2.EntryResult.FromString,
                )
        self.nextKeySetPage = channel.unary_stream(
                '/coherence.NamedCacheService/nextKeySetPage',
                request_serializer=messages__pb2.PageRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
                )
        self.put = channel.unary_unary(
                '/coherence.NamedCacheService/put',
                request_serializer=messages__pb2.PutRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
                )
        self.putAll = channel.unary_unary(
                '/coherence.NamedCacheService/putAll',
                request_serializer=messages__pb2.PutAllRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.putIfAbsent = channel.unary_unary(
                '/coherence.NamedCacheService/putIfAbsent',
                request_serializer=messages__pb2.PutIfAbsentRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
                )
        self.remove = channel.unary_unary(
                '/coherence.NamedCacheService/remove',
                request_serializer=messages__pb2.RemoveRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
                )
        self.removeIndex = channel.unary_unary(
                '/coherence.NamedCacheService/removeIndex',
                request_serializer=messages__pb2.RemoveIndexRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.removeMapping = channel.unary_unary(
                '/coherence.NamedCacheService/removeMapping',
                request_serializer=messages__pb2.RemoveMappingRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
                )
        self.replace = channel.unary_unary(
                '/coherence.NamedCacheService/replace',
                request_serializer=messages__pb2.ReplaceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
                )
        self.replaceMapping = channel.unary_unary(
                '/coherence.NamedCacheService/replaceMapping',
                request_serializer=messages__pb2.ReplaceMappingRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
                )
        self.size = channel.unary_unary(
                '/coherence.NamedCacheService/size',
                request_serializer=messages__pb2.SizeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.Int32Value.FromString,
                )
        self.truncate = channel.unary_unary(
                '/coherence.NamedCacheService/truncate',
                request_serializer=messages__pb2.TruncateRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.values = channel.unary_stream(
                '/coherence.NamedCacheService/values',
                request_serializer=messages__pb2.ValuesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
                )


class NamedCacheServiceServicer(object):
    """A gRPC NamedCache service.

    """

    def addIndex(self, request, context):
        """Add an index to a cache.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def aggregate(self, request, context):
        """Obtain the results of running an entry aggregator against the cache.
        The aggregator may run against entries specified by key or entries
        matching a given filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clear(self, request, context):
        """Clear a cache.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def containsEntry(self, request, context):
        """Check if this map contains a mapping for the specified key to the specified value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def containsKey(self, request, context):
        """Check if this map contains a mapping for the specified key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def containsValue(self, request, context):
        """Check if this map contains a mapping for the specified value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def destroy(self, request, context):
        """Destroy a cache.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def entrySet(self, request, context):
        """Obtain all of the entries in the cache where the cache entries
        match a given filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def events(self, request_iterator, context):
        """Sets up a bidirectional channel for cache events.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """Get a value for a given key from a cache.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAll(self, request, context):
        """Get all of the values from a cache for a given collection of keys.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def invoke(self, request, context):
        """Invoke an entry processor against an entry in a cache.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def invokeAll(self, request, context):
        """Invoke an entry processor against a number of entries in a cache.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isEmpty(self, request, context):
        """Determine whether a cache is empty.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def keySet(self, request, context):
        """Obtain all of the keys in the cache where the cache entries
        match a given filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def nextEntrySetPage(self, request, context):
        """Get the next page of a paged entry set request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def nextKeySetPage(self, request, context):
        """Get the next page of a paged key set request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def put(self, request, context):
        """Associate the specified value with the specified key in this cache.
        If the cache previously contained a mapping for the key, the old value
        is replaced by the specified value.
        An optional expiry (TTL) value may be set for the entry to expire the
        entry from the cache after that time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def putAll(self, request, context):
        """Copies all of the mappings from the request into the cache.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def putIfAbsent(self, request, context):
        """If the specified key is not already associated with a value (or is mapped
        to null associate it with the given value and returns null, else return
        the current value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove(self, request, context):
        """Remove the mapping that is associated with the specified key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeIndex(self, request, context):
        """Remove an index from the cache.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeMapping(self, request, context):
        """Remove the mapping that is associated with the specified key only
        if the mapping exists in the cache.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def replace(self, request, context):
        """Replace the entry for the specified key only if it is currently
        mapped to some value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def replaceMapping(self, request, context):
        """Replace the mapping for the specified key only if currently mapped
        to the specified value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def size(self, request, context):
        """Determine the number of entries in a cache.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def truncate(self, request, context):
        """Truncate a cache. This is the same as clearing a cache but no
        cache entry events will be generated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def values(self, request, context):
        """Obtain all of the values in the cache where the cache entries
        match a given filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NamedCacheServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.addIndex,
                    request_deserializer=messages__pb2.AddIndexRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'aggregate': grpc.unary_unary_rpc_method_handler(
                    servicer.aggregate,
                    request_deserializer=messages__pb2.AggregateRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.SerializeToString,
            ),
            'clear': grpc.unary_unary_rpc_method_handler(
                    servicer.clear,
                    request_deserializer=messages__pb2.ClearRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'containsEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.containsEntry,
                    request_deserializer=messages__pb2.ContainsEntryRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            ),
            'containsKey': grpc.unary_unary_rpc_method_handler(
                    servicer.containsKey,
                    request_deserializer=messages__pb2.ContainsKeyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            ),
            'containsValue': grpc.unary_unary_rpc_method_handler(
                    servicer.containsValue,
                    request_deserializer=messages__pb2.ContainsValueRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            ),
            'destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.destroy,
                    request_deserializer=messages__pb2.DestroyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'entrySet': grpc.unary_stream_rpc_method_handler(
                    servicer.entrySet,
                    request_deserializer=messages__pb2.EntrySetRequest.FromString,
                    response_serializer=messages__pb2.Entry.SerializeToString,
            ),
            'events': grpc.stream_stream_rpc_method_handler(
                    servicer.events,
                    request_deserializer=messages__pb2.MapListenerRequest.FromString,
                    response_serializer=messages__pb2.MapListenerResponse.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=messages__pb2.GetRequest.FromString,
                    response_serializer=messages__pb2.OptionalValue.SerializeToString,
            ),
            'getAll': grpc.unary_stream_rpc_method_handler(
                    servicer.getAll,
                    request_deserializer=messages__pb2.GetAllRequest.FromString,
                    response_serializer=messages__pb2.Entry.SerializeToString,
            ),
            'invoke': grpc.unary_unary_rpc_method_handler(
                    servicer.invoke,
                    request_deserializer=messages__pb2.InvokeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.SerializeToString,
            ),
            'invokeAll': grpc.unary_stream_rpc_method_handler(
                    servicer.invokeAll,
                    request_deserializer=messages__pb2.InvokeAllRequest.FromString,
                    response_serializer=messages__pb2.Entry.SerializeToString,
            ),
            'isEmpty': grpc.unary_unary_rpc_method_handler(
                    servicer.isEmpty,
                    request_deserializer=messages__pb2.IsEmptyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            ),
            'keySet': grpc.unary_stream_rpc_method_handler(
                    servicer.keySet,
                    request_deserializer=messages__pb2.KeySetRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.SerializeToString,
            ),
            'nextEntrySetPage': grpc.unary_stream_rpc_method_handler(
                    servicer.nextEntrySetPage,
                    request_deserializer=messages__pb2.PageRequest.FromString,
                    response_serializer=messages__pb2.EntryResult.SerializeToString,
            ),
            'nextKeySetPage': grpc.unary_stream_rpc_method_handler(
                    servicer.nextKeySetPage,
                    request_deserializer=messages__pb2.PageRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.SerializeToString,
            ),
            'put': grpc.unary_unary_rpc_method_handler(
                    servicer.put,
                    request_deserializer=messages__pb2.PutRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.SerializeToString,
            ),
            'putAll': grpc.unary_unary_rpc_method_handler(
                    servicer.putAll,
                    request_deserializer=messages__pb2.PutAllRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'putIfAbsent': grpc.unary_unary_rpc_method_handler(
                    servicer.putIfAbsent,
                    request_deserializer=messages__pb2.PutIfAbsentRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.SerializeToString,
            ),
            'remove': grpc.unary_unary_rpc_method_handler(
                    servicer.remove,
                    request_deserializer=messages__pb2.RemoveRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.SerializeToString,
            ),
            'removeIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.removeIndex,
                    request_deserializer=messages__pb2.RemoveIndexRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'removeMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.removeMapping,
                    request_deserializer=messages__pb2.RemoveMappingRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            ),
            'replace': grpc.unary_unary_rpc_method_handler(
                    servicer.replace,
                    request_deserializer=messages__pb2.ReplaceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.SerializeToString,
            ),
            'replaceMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.replaceMapping,
                    request_deserializer=messages__pb2.ReplaceMappingRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BoolValue.SerializeToString,
            ),
            'size': grpc.unary_unary_rpc_method_handler(
                    servicer.size,
                    request_deserializer=messages__pb2.SizeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.Int32Value.SerializeToString,
            ),
            'truncate': grpc.unary_unary_rpc_method_handler(
                    servicer.truncate,
                    request_deserializer=messages__pb2.TruncateRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'values': grpc.unary_stream_rpc_method_handler(
                    servicer.values,
                    request_deserializer=messages__pb2.ValuesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.BytesValue.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coherence.NamedCacheService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NamedCacheService(object):
    """A gRPC NamedCache service.

    """

    @staticmethod
    def addIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/addIndex',
            messages__pb2.AddIndexRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def aggregate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/aggregate',
            messages__pb2.AggregateRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def clear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/clear',
            messages__pb2.ClearRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def containsEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/containsEntry',
            messages__pb2.ContainsEntryRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def containsKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/containsKey',
            messages__pb2.ContainsKeyRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def containsValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/containsValue',
            messages__pb2.ContainsValueRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/destroy',
            messages__pb2.DestroyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def entrySet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/coherence.NamedCacheService/entrySet',
            messages__pb2.EntrySetRequest.SerializeToString,
            messages__pb2.Entry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def events(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/coherence.NamedCacheService/events',
            messages__pb2.MapListenerRequest.SerializeToString,
            messages__pb2.MapListenerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/get',
            messages__pb2.GetRequest.SerializeToString,
            messages__pb2.OptionalValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/coherence.NamedCacheService/getAll',
            messages__pb2.GetAllRequest.SerializeToString,
            messages__pb2.Entry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def invoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/invoke',
            messages__pb2.InvokeRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def invokeAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/coherence.NamedCacheService/invokeAll',
            messages__pb2.InvokeAllRequest.SerializeToString,
            messages__pb2.Entry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isEmpty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/isEmpty',
            messages__pb2.IsEmptyRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def keySet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/coherence.NamedCacheService/keySet',
            messages__pb2.KeySetRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def nextEntrySetPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/coherence.NamedCacheService/nextEntrySetPage',
            messages__pb2.PageRequest.SerializeToString,
            messages__pb2.EntryResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def nextKeySetPage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/coherence.NamedCacheService/nextKeySetPage',
            messages__pb2.PageRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def put(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/put',
            messages__pb2.PutRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def putAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/putAll',
            messages__pb2.PutAllRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def putIfAbsent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/putIfAbsent',
            messages__pb2.PutIfAbsentRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/remove',
            messages__pb2.RemoveRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/removeIndex',
            messages__pb2.RemoveIndexRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/removeMapping',
            messages__pb2.RemoveMappingRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def replace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/replace',
            messages__pb2.ReplaceRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def replaceMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/replaceMapping',
            messages__pb2.ReplaceMappingRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BoolValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def size(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/size',
            messages__pb2.SizeRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.Int32Value.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def truncate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coherence.NamedCacheService/truncate',
            messages__pb2.TruncateRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def values(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/coherence.NamedCacheService/values',
            messages__pb2.ValuesRequest.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.BytesValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
